schema @link(url: "https://specs.apollo.dev/link/v1.0") @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) {
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

"""
Entity which holds a exam result for a subject semester and user / student
"""
type AcClassificationGQLModel @join__type(graph: GRANTING, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
  """datetime of classification"""
  date: DateTime!
  """ORDER OF CLASSI"""
  order: Int
  """User"""
  student: UserGQLModel
  """Semester"""
  semester: AcSemesterGQLModel
  """Level"""
  level: AcClassificationLevelGQLModel
}

"""Mark which student could get as an exam evaluation"""
type AcClassificationLevelGQLModel @join__type(graph: GRANTING, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
}

"""Classification at the end of semester"""
type AcClassificationTypeGQLModel @join__type(graph: GRANTING, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
}

"""Entity which represents single lesson included in a topic"""
type AcLessonGQLModel @join__type(graph: GRANTING, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
  """Lesson type"""
  type: AcLessonTypeGQLModel
  """Number of hour of this lesson in the topic"""
  count: Int!
  """The topic which owns this lesson"""
  topic: AcTopicGQLModel
}

"""P, C, LC, S, ..."""
type AcLessonTypeGQLModel @join__type(graph: GRANTING, key: "id") @join__type(graph: LESSONS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String! @join__field(graph: GRANTING)
  """English name"""
  nameEn: String! @join__field(graph: GRANTING)
  """Who created entity"""
  createdby: UserGQLModel @join__field(graph: GRANTING)
  """Who made last change"""
  changedby: UserGQLModel @join__field(graph: GRANTING)
  """Time of entity introduction"""
  created: DateTime @join__field(graph: GRANTING)
  """Time of last update"""
  lastchange: DateTime! @join__field(graph: GRANTING)
}

"""Program form type (Present, distant, ...)"""
type AcProgramFormTypeGQLModel @join__type(graph: GRANTING, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
}

"""Entity representing acredited study programs"""
type AcProgramGQLModel @join__type(graph: GRANTING, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Bachelor, ..."""
  type: AcProgramTypeGQLModel
  """subjects in the program"""
  subjects: [AcSubjectGQLModel!]!
  """subjects in the program"""
  students(skip: Int = 0, limit: Int = 10, where: ProgramStudentInputFilter = null, orderby: String = null, desc: Boolean = null): [AcProgramStudentGQLModel!]!
  """group defining grants of this program"""
  grantsGroup: GroupGQLModel
  """
  group which has got licence to teach this program (faculty or university)
  """
  licencedGroup: GroupGQLModel
}

"""Study program language"""
type AcProgramLanguageTypeGQLModel @join__type(graph: GRANTING, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
}

"""bachelor, ..."""
type AcProgramLevelTypeGQLModel @join__type(graph: GRANTING, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
}

"""Entity representing acredited study programs"""
type AcProgramMessageGQLModel @join__type(graph: GRANTING, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
  """Name """
  name: String!
  """extended content of the message"""
  description: String
  """datetime of the message"""
  date: DateTime
  """student of the program"""
  student: UserGQLModel
  """student of the program"""
  program: UserGQLModel
}

"""Entity which links program and student"""
type AcProgramStudentGQLModel @join__type(graph: GRANTING, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
  """semester which student of the program is in"""
  semester: Int
  """student of the program"""
  student: UserGQLModel
  """messages sent to the student regarding the program"""
  messages(skip: Int = 0, limit: Int = 10, where: ProgramMessagesInputFilter = null, orderby: String = null, desc: Boolean = null): [AcProgramMessageGQLModel!]!
  """student state in this program"""
  state: AcProgramStudentStateGQLModel
  """program"""
  program: AcProgramGQLModel
}

"""Entity which links program and student"""
type AcProgramStudentStateGQLModel @join__type(graph: GRANTING, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
}

"""Bc., Ing., ..."""
type AcProgramTitleTypeGQLModel @join__type(graph: GRANTING, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
}

"""
Encapsulation of language, level, type etc. of program. This is intermediate entity for acredited program and its types
"""
type AcProgramTypeGQLModel @join__type(graph: GRANTING, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
  """Bachelor, ..."""
  level: AcProgramLevelTypeGQLModel
  """Present, Distant, ..."""
  form: AcProgramFormTypeGQLModel
  """Czech, ..."""
  language: AcProgramLanguageTypeGQLModel
  """Bc., Ing., ..."""
  title: AcProgramTitleTypeGQLModel
}

"""Entity representing each semester in study subject"""
type AcSemesterGQLModel @join__type(graph: GRANTING, key: "id") @join__type(graph: LESSONS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String! @join__field(graph: GRANTING)
  """English name"""
  nameEn: String! @join__field(graph: GRANTING)
  """Who created entity"""
  createdby: UserGQLModel @join__field(graph: GRANTING)
  """Who made last change"""
  changedby: UserGQLModel @join__field(graph: GRANTING)
  """Time of entity introduction"""
  created: DateTime @join__field(graph: GRANTING)
  """Time of last update"""
  lastchange: DateTime! @join__field(graph: GRANTING)
  """semester number"""
  order: Int! @join__field(graph: GRANTING)
  """Subject related to the semester (semester owner)"""
  subject: AcSubjectGQLModel @join__field(graph: GRANTING)
  """Subject related to the semester (semester owner)"""
  classificationType: AcClassificationTypeGQLModel @join__field(graph: GRANTING)
  """Final classification of the semester"""
  classifications(skip: Int = 0, limit: Int = 10, where: ClassificationInputFilter = null, orderby: String = null, desc: Boolean = null): [AcClassificationGQLModel!]! @join__field(graph: GRANTING)
  """topics"""
  topics: [AcTopicGQLModel!]! @join__field(graph: GRANTING)
  """Plans"""
  plans: [PlanGQLModel!]! @join__field(graph: LESSONS)
}

"""
Entity which connects programs and semesters, includes informations about subjects (divided into semesters)
"""
type AcSubjectGQLModel @join__type(graph: GRANTING, key: "id") @join__type(graph: PUBLICATIONS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String! @join__field(graph: GRANTING)
  """English name"""
  nameEn: String! @join__field(graph: GRANTING)
  """Who created entity"""
  createdby: UserGQLModel @join__field(graph: GRANTING)
  """Who made last change"""
  changedby: UserGQLModel @join__field(graph: GRANTING)
  """Time of entity introduction"""
  created: DateTime @join__field(graph: GRANTING)
  """Time of last update"""
  lastchange: DateTime! @join__field(graph: GRANTING)
  """Program owing this subjects"""
  program: AcProgramGQLModel! @join__field(graph: GRANTING)
  """Semesters which the subjects in divided into"""
  semesters: [AcSemesterGQLModel!]! @join__field(graph: GRANTING)
  """group defining grants of this subject"""
  grants: GroupGQLModel @join__field(graph: GRANTING)
  """linked publications"""
  publication: [PublicationGQLModel!]! @join__field(graph: PUBLICATIONS)
}

"""Entity which represents a theme included in semester of subject"""
type AcTopicGQLModel @join__type(graph: GRANTING, key: "id") @join__type(graph: LESSONS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String! @join__field(graph: GRANTING)
  """English name"""
  nameEn: String! @join__field(graph: GRANTING)
  """Who created entity"""
  createdby: UserGQLModel @join__field(graph: GRANTING)
  """Who made last change"""
  changedby: UserGQLModel @join__field(graph: GRANTING)
  """Time of entity introduction"""
  created: DateTime @join__field(graph: GRANTING)
  """Time of last update"""
  lastchange: DateTime! @join__field(graph: GRANTING)
  """order (1)"""
  order: Int @join__field(graph: GRANTING)
  """Semester of subject which owns the topic"""
  semester: AcSemesterGQLModel @join__field(graph: GRANTING)
  """Lessons for a topic"""
  lessons: [AcLessonGQLModel!]! @join__field(graph: GRANTING)
}

"""Entity representing an access to information"""
type AnswerGQLModel @join__type(graph: SURVEYS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Time of last update"""
  lastchange: DateTime!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """answer content / value"""
  value: String
  """is the survey already answered?"""
  aswered: Boolean
  """is the survey still available?"""
  expired: Boolean
  """is the survey still available?"""
  user: UserGQLModel
  """is the survey still available?"""
  question: QuestionGQLModel!
}

"""Operators definition on AnswerInputWhereFilter"""
input AnswerInputWhereFilter @join__type(graph: SURVEYS) {
  """Filter method"""
  _or: [AnswerInputWhereFilterOr!] = null
  """Filter method"""
  _and: [AnswerInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  question_id: UuidFilter = null
  """Filter method"""
  user_id: UuidFilter = null
}

"""And operator definition on AnswerInputWhereFilter"""
input AnswerInputWhereFilterAnd @join__type(graph: SURVEYS) {
  """Filter method"""
  _or: [AnswerInputWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  question_id: UuidFilter = null
  """Filter method"""
  user_id: UuidFilter = null
}

"""Or operator definition on AnswerInputWhereFilter"""
input AnswerInputWhereFilterOr @join__type(graph: SURVEYS) {
  """Filter method"""
  _and: [AnswerInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  question_id: UuidFilter = null
  """Filter method"""
  user_id: UuidFilter = null
}

type AnswerResultGQLModel @join__type(graph: SURVEYS) {
  id: UUID!
  msg: String!
  """Result of answer operation"""
  answer: AnswerGQLModel
}

input AnswerUpdateGQLModel @join__type(graph: SURVEYS) {
  lastchange: DateTime!
  id: UUID!
  value: String = null
  aswered: Boolean = null
  expired: Boolean = null
}

""""""
type AuthorResultGQLModel @join__type(graph: PUBLICATIONS) {
  id: UUID!
  msg: String!
  """Result of publication operation"""
  author: PublicationAuthorGQLModel
}

"""Integer filter methods, only one constrain allowed"""
input BoolFilter @join__type(graph: EVENTS) @join__type(graph: FACILITIES) @join__type(graph: FORMS) @join__type(graph: GRANTING) @join__type(graph: PROJECTS) @join__type(graph: UG) {
  """operation for select.filter() method"""
  _eq: Boolean = null
}

"""Operators definition on ClassificationInputFilter"""
input ClassificationInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ClassificationInputFilterOr!] = null
  """Filter method"""
  _and: [ClassificationInputFilterAnd!] = null
  """Filter method"""
  order: IntFilter = null
  """Filter method"""
  semester_id: UuidFilter = null
  """Filter method"""
  user_id: UuidFilter = null
  """Filter method"""
  classificationlevel_id: UuidFilter = null
  """Filter method"""
  date: DatetimeFilter = null
}

"""And operator definition on ClassificationInputFilter"""
input ClassificationInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ClassificationInputFilterOr!] = null
  """Filter method"""
  order: IntFilter = null
  """Filter method"""
  semester_id: UuidFilter = null
  """Filter method"""
  user_id: UuidFilter = null
  """Filter method"""
  classificationlevel_id: UuidFilter = null
  """Filter method"""
  date: DatetimeFilter = null
}

"""Or operator definition on ClassificationInputFilter"""
input ClassificationInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [ClassificationInputFilterAnd!] = null
  """Filter method"""
  order: IntFilter = null
  """Filter method"""
  semester_id: UuidFilter = null
  """Filter method"""
  user_id: UuidFilter = null
  """Filter method"""
  classificationlevel_id: UuidFilter = null
  """Filter method"""
  date: DatetimeFilter = null
}

"""Model for initialization during C operation"""
input ClassificationInsertGQLModel @join__type(graph: GRANTING) {
  semesterId: UUID!
  studentId: UUID!
  classificationlevelId: UUID!
  date: DateTime!
  order: Int!
  id: UUID = null
}

"""Result of CUD operations"""
type ClassificationResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of classification operation"""
  classification: AcClassificationGQLModel
}

"""Model for initialization during C operation"""
input ClassificationTypeInsertGQLModel @join__type(graph: GRANTING) {
  name: String!
  id: UUID = null
  nameEn: String = null
}

"""Result of CUD operations"""
type ClassificationTypeResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of classificationtype operation"""
  classificationType: AcClassificationTypeGQLModel
}

"""Model for definition of U operation"""
input ClassificationTypeUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
}

"""Model for definition of D operation"""
input ClassificationUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID = null
  lastchange: DateTime!
  classificationlevelId: UUID = null
  date: DateTime = null
  order: Int = null
}

"""Date (isoformat)"""
scalar Date @join__type(graph: PROJECTS) @join__type(graph: PUBLICATIONS)

"""Date with time (isoformat)"""
scalar DateTime @join__type(graph: EVENTS) @join__type(graph: EXTERNALIDS) @join__type(graph: FACILITIES) @join__type(graph: FORMS) @join__type(graph: GRANTING) @join__type(graph: LESSONS) @join__type(graph: PROJECTS) @join__type(graph: PUBLICATIONS) @join__type(graph: SURVEYS) @join__type(graph: UG)

"""Datetime filter methods, only one constrain allowed"""
input DatetimeFilter @join__type(graph: EVENTS) @join__type(graph: GRANTING) @join__type(graph: UG) {
  """operation for select.filter() method"""
  _eq: DateTime = null
  """operation for select.filter() method"""
  _le: DateTime = null
  """operation for select.filter() method"""
  _lt: DateTime = null
  """operation for select.filter() method"""
  _ge: DateTime = null
  """operation for select.filter() method"""
  _gt: DateTime = null
}

"""Entity representing an event (calendar item)"""
type EventGQLModel @join__type(graph: EVENTS, key: "id") @join__type(graph: EXTERNALIDS, key: "id") @join__type(graph: LESSONS, key: "id") @join__type(graph: PROJECTS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String! @join__field(graph: EVENTS)
  """English name"""
  nameEn: String! @join__field(graph: EVENTS)
  """Time of last update"""
  lastchange: DateTime! @join__field(graph: EVENTS)
  """Time of entity introduction"""
  created: DateTime @join__field(graph: EVENTS)
  """Who created entity"""
  createdby: UserGQLModel @join__field(graph: EVENTS)
  """Who made last change"""
  changedby: UserGQLModel @join__field(graph: EVENTS)
  """Event duration, implicitly in minutes"""
  duration(unit: TimeUnit! = MINUTES): Float @join__field(graph: EVENTS)
  """Event description"""
  description: String @join__field(graph: EVENTS)
  """Place"""
  place: String @join__field(graph: EVENTS)
  """Place id"""
  placeId: UUID @join__field(graph: EVENTS)
  """Date&time of event begin"""
  startdate: DateTime @join__field(graph: EVENTS)
  """Date&time of event end"""
  enddate: DateTime @join__field(graph: EVENTS)
  """Groups of users linked to the event"""
  groups: [GroupGQLModel!]! @join__field(graph: EVENTS)
  """Participants of the event and if they were absent or so..."""
  presences: [PresenceGQLModel!]! @join__field(graph: EVENTS)
  """Type of the event"""
  eventType: EventTypeGQLModel @join__field(graph: EVENTS)
  """event which contains this event (aka semester of this lesson)"""
  masterEvent: EventGQLModel @join__field(graph: EVENTS)
  """
  events which are contained by this event (aka all lessons for the semester)
  """
  subEvents: [EventGQLModel!]! @join__field(graph: EVENTS)
  """All related external ids"""
  externalIds: [ExternalIdGQLModel!]! @join__field(graph: EXTERNALIDS)
}

"""First datastructure for invitation type creation"""
input EventGroupInputGQLModel @join__type(graph: EVENTS) {
  id: UUID = null
  eventId: UUID!
  groupId: UUID!
}

"""Operators definition on EventInputFilter"""
input EventInputFilter @join__type(graph: EVENTS) {
  """Filter method"""
  _or: [EventInputFilterOr!] = null
  """Filter method"""
  _and: [EventInputFilterAnd!] = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  masterevent_id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  duration: TimeDurationFilter = null
  """Filter method"""
  startdate: DatetimeFilter = null
  """Filter method"""
  enddate: DatetimeFilter = null
  """Filter method"""
  type: EventTypeInputFilter = null
  """Filter method"""
  presences: PresenceInputFilter = null
}

"""And operator definition on EventInputFilter"""
input EventInputFilterAnd @join__type(graph: EVENTS) {
  """Filter method"""
  _or: [EventInputFilterOr!] = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  masterevent_id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  duration: TimeDurationFilter = null
  """Filter method"""
  startdate: DatetimeFilter = null
  """Filter method"""
  enddate: DatetimeFilter = null
  """Filter method"""
  type: EventTypeInputFilter = null
  """Filter method"""
  presences: PresenceInputFilter = null
}

"""Or operator definition on EventInputFilter"""
input EventInputFilterOr @join__type(graph: EVENTS) {
  """Filter method"""
  _and: [EventInputFilterAnd!] = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  masterevent_id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  duration: TimeDurationFilter = null
  """Filter method"""
  startdate: DatetimeFilter = null
  """Filter method"""
  enddate: DatetimeFilter = null
  """Filter method"""
  type: EventTypeInputFilter = null
  """Filter method"""
  presences: PresenceInputFilter = null
}

"""Datastructure for insert"""
input EventInsertGQLModel @join__type(graph: EVENTS) {
  name: String!
  typeId: UUID!
  id: UUID = null
  mastereventId: UUID = null
  place: String = null
  placeId: UUID = null
  """start date of event"""
  startdate: DateTime = "2025-08-25T16:11:44.887168"
  """end date of event"""
  enddate: DateTime = "2025-08-25T16:41:44.887190"
}

"""Result of event operation"""
type EventResultGQLModel @join__type(graph: EVENTS) {
  id: UUID!
  msg: String!
  """Result of event operation"""
  event: EventGQLModel
}

"""Represents an event type"""
type EventTypeGQLModel @join__type(graph: EVENTS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Related events"""
  events: [EventGQLModel!]!
}

"""Operators definition on EventTypeInputFilter"""
input EventTypeInputFilter @join__type(graph: EVENTS) {
  """Filter method"""
  _or: [EventTypeInputFilterOr!] = null
  """Filter method"""
  _and: [EventTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on EventTypeInputFilter"""
input EventTypeInputFilterAnd @join__type(graph: EVENTS) {
  """Filter method"""
  _or: [EventTypeInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on EventTypeInputFilter"""
input EventTypeInputFilterOr @join__type(graph: EVENTS) {
  """Filter method"""
  _and: [EventTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""First datastructure for event type creation"""
input EventTypeInsertGQLModel @join__type(graph: EVENTS) {
  """name of event type"""
  name: String!
  """english name of event type"""
  nameEn: String = null
  id: UUID = null
}

"""Result of event type operation"""
type EventTypeResultGQLModel @join__type(graph: EVENTS) {
  id: UUID!
  msg: String!
  """Event type"""
  eventType: EventTypeGQLModel
}

"""Datastructure for event type update"""
input EventTypeUpdateGQLModel @join__type(graph: EVENTS) {
  id: UUID!
  name: String = null
  nameEn: String = null
}

"""Datastructure for update"""
input EventUpdateGQLModel @join__type(graph: EVENTS) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  mastereventId: UUID = null
  typeId: UUID = null
  place: String = null
  placeId: UUID = null
  startdate: DateTime = null
  enddate: DateTime = null
}

"""First datastructure for invitation type creation"""
input EventUserInputGQLModel @join__type(graph: EVENTS) {
  eventId: UUID!
  userId: UUID!
  invitationtypeId: UUID!
  id: UUID = null
  presencetypeId: UUID = null
}

"""Entity representing an external category id ()"""
type ExternalIdCategoryGQLModel @join__type(graph: EXTERNALIDS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who made last change"""
  changedBy: UserGQLModel
  """Who created entity"""
  createdBy: UserGQLModel
}

"""Operators definition on ExternalidCategoryInputWhereFilter"""
input ExternalidCategoryInputWhereFilter @join__type(graph: EXTERNALIDS) {
  """Filter method"""
  _or: [ExternalidCategoryInputWhereFilterOr!] = null
  """Filter method"""
  _and: [ExternalidCategoryInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on ExternalidCategoryInputWhereFilter"""
input ExternalidCategoryInputWhereFilterAnd @join__type(graph: EXTERNALIDS) {
  """Filter method"""
  _or: [ExternalidCategoryInputWhereFilterOr!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on ExternalidCategoryInputWhereFilter"""
input ExternalidCategoryInputWhereFilterOr @join__type(graph: EXTERNALIDS) {
  """Filter method"""
  _and: [ExternalidCategoryInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

""""""
input ExternalIdCategoryInsertGQLModel @join__type(graph: EXTERNALIDS) {
  """Name of category"""
  name: String!
  """En name of category"""
  nameEn: String = null
  """Could be uuid primary key"""
  id: UUID = null
}

""""""
type ExternalIdCategoryResultGQLModel @join__type(graph: EXTERNALIDS) {
  """Primary key of table row"""
  id: UUID
  """result of operation, should be "ok" or "fail" """
  msg: String!
  """Result of insert operation"""
  externalidcategory: ExternalIdCategoryGQLModel
}

""""""
input ExternalIdCategoryUpdateGQLModel @join__type(graph: EXTERNALIDS) {
  """Primary key"""
  id: UUID!
  """Timestamp"""
  lastchange: DateTime!
  """Name of category"""
  name: String = null
  """En name of category"""
  nameEn: String = null
}

"""
Entity representing an external type id (like SCOPUS identification / id)
"""
type ExternalIdGQLModel @join__type(graph: EXTERNALIDS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who made last change"""
  changedBy: UserGQLModel
  """Who created entity"""
  createdBy: UserGQLModel
  """Inner id"""
  innerId: UUID
  """Outer id"""
  outerId: String
  """Type of id"""
  type: ExternalIdTypeGQLModel
  """Type name of id"""
  typeName: String
  """html link"""
  link: String
}

"""Operators definition on ExternalidInputWhereFilter"""
input ExternalidInputWhereFilter @join__type(graph: EXTERNALIDS) {
  """Filter method"""
  _or: [ExternalidInputWhereFilterOr!] = null
  """Filter method"""
  _and: [ExternalidInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  inner_id: UuidFilter = null
  """Filter method"""
  outer_id: StrFilter = null
  """Filter method"""
  typeid_id: UuidFilter = null
  """Filter method"""
  type: ExternalidTypeInputWhereFilter = null
}

"""And operator definition on ExternalidInputWhereFilter"""
input ExternalidInputWhereFilterAnd @join__type(graph: EXTERNALIDS) {
  """Filter method"""
  _or: [ExternalidInputWhereFilterOr!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  inner_id: UuidFilter = null
  """Filter method"""
  outer_id: StrFilter = null
  """Filter method"""
  typeid_id: UuidFilter = null
  """Filter method"""
  type: ExternalidTypeInputWhereFilter = null
}

"""Or operator definition on ExternalidInputWhereFilter"""
input ExternalidInputWhereFilterOr @join__type(graph: EXTERNALIDS) {
  """Filter method"""
  _and: [ExternalidInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  inner_id: UuidFilter = null
  """Filter method"""
  outer_id: StrFilter = null
  """Filter method"""
  typeid_id: UuidFilter = null
  """Filter method"""
  type: ExternalidTypeInputWhereFilter = null
}

""""""
input ExternalIdInsertGQLModel @join__type(graph: EXTERNALIDS) {
  """Primary key of entity which new outeid is assigned"""
  innerId: UUID!
  """Type of external id"""
  typeidId: UUID!
  """Key used by other systems"""
  outerId: String!
  """Primary key of table row"""
  id: UUID = null
}

""""""
type ExternalIdResultGQLModel @join__type(graph: EXTERNALIDS) {
  """Primary key of table row"""
  id: UUID
  """result of operation, should be "ok" or "fail" """
  msg: String!
  """Result of drone operation"""
  externalid: ExternalIdGQLModel
}

"""
Entity representing an external type id (like SCOPUS identification / id)
"""
type ExternalIdTypeGQLModel @join__type(graph: EXTERNALIDS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who made last change"""
  changedBy: UserGQLModel
  """Who created entity"""
  createdBy: UserGQLModel
  """Category which belongs to"""
  category: ExternalIdCategoryGQLModel
}

"""Operators definition on ExternalidTypeInputWhereFilter"""
input ExternalidTypeInputWhereFilter @join__type(graph: EXTERNALIDS) {
  """Filter method"""
  _or: [ExternalidTypeInputWhereFilterOr!] = null
  """Filter method"""
  _and: [ExternalidTypeInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  category: ExternalidCategoryInputWhereFilter = null
}

"""And operator definition on ExternalidTypeInputWhereFilter"""
input ExternalidTypeInputWhereFilterAnd @join__type(graph: EXTERNALIDS) {
  """Filter method"""
  _or: [ExternalidTypeInputWhereFilterOr!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  category: ExternalidCategoryInputWhereFilter = null
}

"""Or operator definition on ExternalidTypeInputWhereFilter"""
input ExternalidTypeInputWhereFilterOr @join__type(graph: EXTERNALIDS) {
  """Filter method"""
  _and: [ExternalidTypeInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  category: ExternalidCategoryInputWhereFilter = null
}

""""""
input ExternalIdTypeInsertGQLModel @join__type(graph: EXTERNALIDS) {
  """Could be uuid primary key"""
  id: UUID = null
  """Name of type"""
  name: String!
  """En name of type"""
  nameEn: String = null
  """Format for conversion of id into url link"""
  urlformat: String = null
  """Category of type"""
  categoryId: UUID = null
}

""""""
type ExternalIdTypeResultGQLModel @join__type(graph: EXTERNALIDS) {
  """Primary key of table row"""
  id: UUID
  """result of operation, should be "ok" or "fail" """
  msg: String!
  """Result of insert operation"""
  externaltypeid: ExternalIdTypeGQLModel
}

""""""
input ExternalIdTypeUpdateGQLModel @join__type(graph: EXTERNALIDS) {
  """Primary key"""
  id: UUID!
  """Timestamp"""
  lastchange: DateTime!
  """Name of type"""
  name: String = null
  """En name of type"""
  nameEn: String = null
  """Format for conversion of id into url link"""
  urlformat: String = null
  """Category of type"""
  categoryId: UUID = null
}

"""Entity representing a facility type"""
type FacilityEventStateTypeGQLModel @join__type(graph: FACILITIES, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
}

"""Entity representing a Facility"""
type FacilityGQLModel @join__type(graph: EXTERNALIDS, key: "id") @join__type(graph: FACILITIES, key: "id") @join__type(graph: LESSONS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """All related external ids"""
  externalIds: [ExternalIdGQLModel!]! @join__field(graph: EXTERNALIDS)
  """Name """
  name: String! @join__field(graph: FACILITIES)
  """English name"""
  nameEn: String! @join__field(graph: FACILITIES)
  """Time of last update"""
  lastchange: DateTime! @join__field(graph: FACILITIES)
  """Time of entity introduction"""
  created: DateTime @join__field(graph: FACILITIES)
  """Who created entity"""
  createdby: UserGQLModel @join__field(graph: FACILITIES)
  """Who made last change"""
  changedby: UserGQLModel @join__field(graph: FACILITIES)
  """Facility full name assigned by an administrator"""
  label: String @join__field(graph: FACILITIES)
  """Facility address"""
  address: String @join__field(graph: FACILITIES)
  """is the facility still valid"""
  valid: Boolean @join__field(graph: FACILITIES)
  """Facility's capacity"""
  capacity: Int @join__field(graph: FACILITIES)
  """Facility geometry (SVG)"""
  geometry: String @join__field(graph: FACILITIES)
  """Facility geo address (WGS84+zoom)"""
  geolocation: String @join__field(graph: FACILITIES)
  """Facility type"""
  type: FacilityTypeGQLModel @join__field(graph: FACILITIES)
  """Intermediate entity linking the event and facility"""
  eventState: FacilityEventStateTypeGQLModel @join__field(graph: FACILITIES)
  """Facility above this"""
  masterFacility: FacilityGQLModel @join__field(graph: FACILITIES)
  """Facilities inside facility (like buildings in an areal)"""
  subFacilities: [FacilityGQLModel!]! @join__field(graph: FACILITIES)
  """Facility management group"""
  group: GroupGQLModel @join__field(graph: FACILITIES)
  """planned items"""
  plannedLessons: [PlannedLessonGQLModel!]! @join__field(graph: LESSONS)
}

"""Operators definition on FacilityInputFilter"""
input FacilityInputFilter @join__type(graph: FACILITIES) {
  """Filter method"""
  _or: [FacilityInputFilterOr!] = null
  """Filter method"""
  _and: [FacilityInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  label: StrFilter = null
  """Filter method"""
  capacity: IntFilter = null
  """Filter method"""
  group_id: UuidFilter = null
}

"""And operator definition on FacilityInputFilter"""
input FacilityInputFilterAnd @join__type(graph: FACILITIES) {
  """Filter method"""
  _or: [FacilityInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  label: StrFilter = null
  """Filter method"""
  capacity: IntFilter = null
  """Filter method"""
  group_id: UuidFilter = null
}

"""Or operator definition on FacilityInputFilter"""
input FacilityInputFilterOr @join__type(graph: FACILITIES) {
  """Filter method"""
  _and: [FacilityInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  label: StrFilter = null
  """Filter method"""
  capacity: IntFilter = null
  """Filter method"""
  group_id: UuidFilter = null
}

input FacilityInsertGQLModel @join__type(graph: FACILITIES) {
  name: String!
  facilitytypeId: UUID = null
  id: UUID = null
  startdate: DateTime = "2025-08-25T16:11:44.280592"
  enddate: DateTime = "2025-08-25T16:41:44.280599"
  nameEn: String = ""
  label: String = ""
  address: String = ""
  valid: Boolean = true
  capacity: Int = 0
  geometry: String = ""
  geolocation: String = ""
  groupId: UUID = null
  masterFacilityId: UUID = null
}

type FacilityResultGQLModel @join__type(graph: FACILITIES) {
  id: UUID!
  msg: String!
  """Result of user operation"""
  facility: FacilityGQLModel
}

"""Entity representing a facility type"""
type FacilityTypeGQLModel @join__type(graph: FACILITIES, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
}

"""Operators definition on FacilityTypeInputFilter"""
input FacilityTypeInputFilter @join__type(graph: FACILITIES) {
  """Filter method"""
  _or: [FacilityTypeInputFilterOr!] = null
  """Filter method"""
  _and: [FacilityTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on FacilityTypeInputFilter"""
input FacilityTypeInputFilterAnd @join__type(graph: FACILITIES) {
  """Filter method"""
  _or: [FacilityTypeInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on FacilityTypeInputFilter"""
input FacilityTypeInputFilterOr @join__type(graph: FACILITIES) {
  """Filter method"""
  _and: [FacilityTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

input FacilityUpdateGQLModel @join__type(graph: FACILITIES) {
  lastchange: DateTime!
  id: UUID = null
  name: String = null
  facilitytypeId: UUID = null
  nameEn: String = null
  label: String = null
  address: String = null
  valid: Boolean = null
  capacity: Int = null
  geometry: String = null
  geolocation: String = null
  groupId: UUID = null
  masterFacilityId: UUID = null
  startdate: DateTime = null
  enddate: DateTime = null
}

"""Entity representing a finance category"""
type FinanceCategoryGQLModel @join__type(graph: PROJECTS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String!
  """Entity english name"""
  nameEn: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """User ID """
  userId: UserGQLModel
}

"""Definition of a finance category used for creation"""
input FinanceCategoryInsertGQLModel @join__type(graph: PROJECTS) {
  """Name/label of the finance category"""
  name: String!
  """Name/label of the finance category in English"""
  nameEn: String!
  """The ID of the finance category data"""
  id: UUID = null
}

"""Result of a mutation for a finance category"""
type FinanceCategoryResultGQLModel @join__type(graph: PROJECTS) {
  """The ID of the finance category"""
  id: UUID!
  """Result of the operation (OK/Fail)"""
  msg: String!
  """Returns the finance category"""
  project: FinanceCategoryGQLModel
}

"""Definition of a finance category used for update"""
input FinanceCategoryUpdateGQLModel @join__type(graph: PROJECTS) {
  """The ID of the finance category"""
  id: UUID!
  """Timestamp of the last change"""
  lastchange: DateTime!
  """Updated name/label of the finance category"""
  name: String = null
  """Updated name/label of the finance category in English"""
  nameEn: String = null
}

"""Operators definition on FinanceCategoryWhereFilter"""
input FinanceCategoryWhereFilter @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [FinanceCategoryWhereFilterOr!] = null
  """Filter method"""
  _and: [FinanceCategoryWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
}

"""And operator definition on FinanceCategoryWhereFilter"""
input FinanceCategoryWhereFilterAnd @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [FinanceCategoryWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
}

"""Or operator definition on FinanceCategoryWhereFilter"""
input FinanceCategoryWhereFilterOr @join__type(graph: PROJECTS) {
  """Filter method"""
  _and: [FinanceCategoryWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
}

"""Entity representing a finance"""
type FinanceGQLModel @join__type(graph: PROJECTS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String!
  """Entity amount"""
  amount: Float!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Validity of event"""
  valid: Boolean!
  """Project of finance"""
  project: ProjectGQLModel
  """Finance type of finance"""
  financeType: [FinanceTypeGQLModel!]!
}

"""Definition of finance data used for creation"""
input FinanceInsertGQLModel @join__type(graph: PROJECTS) {
  """Name/label of the finance"""
  name: String!
  """The ID of the associated financial type"""
  financetypeId: UUID!
  """The ID of the associated project"""
  projectId: UUID!
  """Indicates whether the financial data is valid or not (optional)"""
  valid: Boolean = true
  """The ID of the finance"""
  id: UUID = null
  """The amount of finance"""
  amount: Float = 0
}

"""Result of a financial data operation"""
type FinanceResultGQLModel @join__type(graph: PROJECTS) {
  """The ID of the financial data"""
  id: UUID!
  """Result of the operation (OK/Fail)"""
  msg: String!
  """Returns the financial data"""
  finance: FinanceGQLModel
}

"""Entity representing a finance type"""
type FinanceTypeGQLModel @join__type(graph: PROJECTS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String!
  """Entity english name"""
  nameEn: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Validity of event"""
  valid: Boolean!
  """List of finances, related to finance type"""
  finances: [FinanceGQLModel!]!
  """List of category Id's, related to finance type"""
  category: FinanceCategoryGQLModel
}

"""Definition of a finance type used for creation"""
input FinanceTypeInsertGQLModel @join__type(graph: PROJECTS) {
  """Name/label of the finance type"""
  name: String!
  """The ID of the finance category"""
  categoryId: UUID!
  """Name/label of the finance type in English"""
  nameEn: String = null
  """Indicates whether the financial data is valid or not"""
  valid: Boolean = true
  """The ID of the finance type data"""
  id: UUID = null
}

"""Result of a mutation result of finance type"""
type FinanceTypeResultGQLModel @join__type(graph: PROJECTS) {
  """The ID of the finance type"""
  id: UUID!
  """Result of the operation (OK/Fail)"""
  msg: String!
  """Returns the finance type"""
  finance: FinanceTypeGQLModel
}

"""Definition of finance type used for update"""
input FinanceTypeUpdateGQLModel @join__type(graph: PROJECTS) {
  """The ID of the finance type"""
  id: UUID!
  """Timestamp of last change"""
  lastchange: DateTime!
  """Indicates whether the financial data is valid or not"""
  valid: Boolean = null
  """Updated name/label of the finance category"""
  name: String = null
  """Updated name/label of the finance category in English"""
  nameEn: String = null
}

"""Operators definition on FinanceTypeWhereFilter"""
input FinanceTypeWhereFilter @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [FinanceTypeWhereFilterOr!] = null
  """Filter method"""
  _and: [FinanceTypeWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""And operator definition on FinanceTypeWhereFilter"""
input FinanceTypeWhereFilterAnd @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [FinanceTypeWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""Or operator definition on FinanceTypeWhereFilter"""
input FinanceTypeWhereFilterOr @join__type(graph: PROJECTS) {
  """Filter method"""
  _and: [FinanceTypeWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""Definition of finance data used for update"""
input FinanceUpdateGQLModel @join__type(graph: PROJECTS) {
  """The ID of the finance data"""
  id: UUID!
  """Timestamp of last change"""
  lastchange: DateTime!
  """Indicates whether the financial data is valid or not (optional)"""
  valid: Boolean = null
  """Updated name/label of the finance"""
  name: String = null
  """The ID of the financial data type"""
  financetypeId: UUID = null
  """Updated the amount of financial"""
  amount: Float = null
}

"""Operators definition on FinanceWhereFilter"""
input FinanceWhereFilter @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [FinanceWhereFilterOr!] = null
  """Filter method"""
  _and: [FinanceWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""And operator definition on FinanceWhereFilter"""
input FinanceWhereFilterAnd @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [FinanceWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""Or operator definition on FinanceWhereFilter"""
input FinanceWhereFilterOr @join__type(graph: PROJECTS) {
  """Filter method"""
  _and: [FinanceWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""Entity representing a category of form types"""
type FormCategoryGQLModel @join__type(graph: FORMS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """English name"""
  nameEn: String!
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """"""
  formTypes: [FormTypeGQLModel!]!
}

"""Input structure - C operation"""
input FormCategoryInsertGQLModel @join__type(graph: FORMS) {
  """Category name"""
  name: String!
  """category english name"""
  nameEn: String = null
  """primary key (UUID), could be client generated"""
  id: UUID = null
}

"""Result of CU operations on FormCategory"""
type FormCategoryResultGQLModel @join__type(graph: FORMS) {
  """primary key of CU operation object"""
  id: UUID!
  """
  Should be `ok` if descired state has been reached, otherwise `fail`.
  For update operation fail should be also stated when bad lastchange has been entered.
  """
  msg: String!
  """subject of operation"""
  category: FormCategoryGQLModel!
}

"""Input structure - U Operation"""
input FormCategoryUpdateGQLModel @join__type(graph: FORMS) {
  """timestamp of last change = TOKEN"""
  lastchange: DateTime!
  """primary key (UUID), identifies object of operation"""
  id: UUID!
  """category name"""
  name: String = null
  """category english name"""
  nameEn: String = null
}

"""Operators definition on FormCategoryWhereFilter"""
input FormCategoryWhereFilter @join__type(graph: FORMS) {
  """Filter method"""
  _or: [FormCategoryWhereFilterOr!] = null
  """Filter method"""
  _and: [FormCategoryWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on FormCategoryWhereFilter"""
input FormCategoryWhereFilterAnd @join__type(graph: FORMS) {
  """Filter method"""
  _or: [FormCategoryWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on FormCategoryWhereFilter"""
input FormCategoryWhereFilterOr @join__type(graph: FORMS) {
  """Filter method"""
  _and: [FormCategoryWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""
# Reason

Entity representing a form, form is digitalized A4 sheet

## Structure

form -> sections -> parts -> items
"""
type FormGQLModel @join__type(graph: FORMS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """English name"""
  nameEn: String!
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Form's validity"""
  valid: Boolean!
  """Form's status"""
  status: String
  """
  Retrieves the sections related to this form (form has several sections), form->section->part->item
  """
  sections(skip: Int = 0, limit: Int = 10): [FormSectionGQLModel!]!
  """Retrieves the user who has initiated this request"""
  creator: UserGQLModel
  """Retrieves the type of form"""
  type: FormTypeGQLModel
}

"""Input structure - C operation"""
input FormInsertGQLModel @join__type(graph: FORMS) {
  """form name"""
  name: String!
  typeId: UUID = null
  """
  user_id or group_id, allows resolution of authorized users, if not present, logged user will be assigned
  """
  rbacobject: UUID = null
  """primary key (UUID), could be client generated"""
  id: UUID = null
  """form name"""
  nameEn: String = null
  valid: Boolean = true
}

"""Type representing an item category"""
type FormItemCategoryGQLModel @join__type(graph: FORMS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """English name"""
  nameEn: String!
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Returns all type for this category"""
  types: [FormItemTypeGQLModel!]!
}

"""Input structure - C operation"""
input FormItemCategoryInsertGQLModel @join__type(graph: FORMS) {
  """Item category name"""
  name: String!
  """primary key (UUID), could be client generated"""
  id: UUID = null
}

"""Result of CU operations"""
type FormItemCategoryResultGQLModel @join__type(graph: FORMS) {
  """primary key of CU operation object"""
  id: UUID!
  """
  Should be `ok` if descired state has been reached, otherwise `fail`.
  For update operation fail should be also stated when bad lastchange has been entered.
  """
  msg: String!
  """Object of CU operation, final version"""
  category: FormItemCategoryGQLModel!
}

"""Input structure - U operation"""
input FormItemCategoryUpdateGQLModel @join__type(graph: FORMS) {
  """timestamp of last change = TOKEN"""
  lastchange: DateTime!
  """primary key (UUID), identifies object of operation"""
  id: UUID!
  """Item category name"""
  name: String = null
}

"""Type representing an item in the form"""
type FormItemGQLModel @join__type(graph: FORMS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """English name"""
  nameEn: String!
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Item's order"""
  order: Int!
  """Item's value """
  value: String!
  """Retrieves the part owning the item"""
  part: FormPartGQLModel
  """Retrieves the item type"""
  type: FormItemTypeGQLModel
}

"""Input structure - C operation"""
input FormItemInsertGQLModel @join__type(graph: FORMS) {
  """Item name"""
  name: String!
  """id of parent entity"""
  partId: UUID!
  """Item name"""
  nameEn: String = null
  """primary key (UUID), could be client generated"""
  id: UUID = null
  value: String = null
  """Position in parent entity"""
  order: Int = null
  typeId: UUID = null
}

"""Result of CU operations"""
type FormItemResultGQLModel @join__type(graph: FORMS) {
  """primary key of CU operation object"""
  id: UUID!
  """
  Should be `ok` if descired state has been reached, otherwise `fail`.
  For update operation fail should be also stated when bad lastchange has been entered.
  """
  msg: String!
  """Result of item operation"""
  item: FormItemGQLModel
}

"""Type representing an item type"""
type FormItemTypeGQLModel @join__type(graph: FORMS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """English name"""
  nameEn: String!
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Type category"""
  category: FormItemCategoryGQLModel
  """"""
  items: [FormItemGQLModel!]!
}

"""Input structure - C operation"""
input FormItemTypeInsertGQLModel @join__type(graph: FORMS) {
  """Item type name"""
  name: String!
  """primary key (UUID), could be client generated"""
  id: UUID = null
}

"""Result of CU operations"""
type FormItemTypeResultGQLModel @join__type(graph: FORMS) {
  """primary key of CU operation object"""
  id: UUID!
  """
  Should be `ok` if descired state has been reached, otherwise `fail`.
  For update operation fail should be also stated when bad lastchange has been entered.
  """
  msg: String!
  """Object of CU operation, final version"""
  itemType: FormItemTypeGQLModel!
}

"""Input structure - U operation"""
input FormItemTypeUpdateGQLModel @join__type(graph: FORMS) {
  """primary key (UUID), identifies object of operation"""
  id: UUID!
  """timestamp of last change = TOKEN"""
  lastchange: DateTime!
  """Item type name"""
  name: String = null
  order: Int = null
}

"""Input structure - U operation"""
input FormItemUpdateGQLModel @join__type(graph: FORMS) {
  """timestamp of last change = TOKEN"""
  lastchange: DateTime!
  """primary key (UUID), identifies object of operation"""
  id: UUID!
  """Item name"""
  name: String = null
  """Item name"""
  nameEn: String = null
  value: String = null
  """Position in parent entity"""
  order: Int = null
  typeId: UUID = null
}

"""Operators definition on FormItemWhereFilter"""
input FormItemWhereFilter @join__type(graph: FORMS) {
  """Filter method"""
  _or: [FormItemWhereFilterOr!] = null
  """Filter method"""
  _and: [FormItemWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
}

"""And operator definition on FormItemWhereFilter"""
input FormItemWhereFilterAnd @join__type(graph: FORMS) {
  """Filter method"""
  _or: [FormItemWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
}

"""Or operator definition on FormItemWhereFilter"""
input FormItemWhereFilterOr @join__type(graph: FORMS) {
  """Filter method"""
  _and: [FormItemWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
}

"""Type representing a part in the section"""
type FormPartGQLModel @join__type(graph: FORMS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """English name"""
  nameEn: String!
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Part's order"""
  order: Int!
  """Retrieves the section owning this part"""
  section: FormSectionGQLModel
  """Retrieves the items related to this part"""
  items: [FormItemGQLModel!]!
}

"""Input structure - C operation"""
input FormPartInsertGQLModel @join__type(graph: FORMS) {
  """Part name"""
  name: String!
  sectionId: UUID!
  """English part name"""
  nameEn: String = null
  """primary key (UUID), could be client generated"""
  id: UUID = null
  """Position in parent entity"""
  order: Int = null
}

"""Result of CU operations"""
type FormPartResultGQLModel @join__type(graph: FORMS) {
  """primary key of CU operation object"""
  id: UUID!
  """
  Should be `ok` if descired state has been reached, otherwise `fail`.
  For update operation fail should be also stated when bad lastchange has been entered.
  """
  msg: String!
  """Object of CU operation, final version"""
  part: FormPartGQLModel!
}

"""Input structure - U operation"""
input FormPartUpdateGQLModel @join__type(graph: FORMS) {
  """primary key (UUID), identifies object of operation"""
  id: UUID!
  """timestamp of last change = TOKEN"""
  lastchange: DateTime!
  """id of parent entity"""
  sectionId: UUID = null
  """Part name"""
  name: String = null
  """English part name"""
  nameEn: String = null
  """Position in parent entity"""
  order: Int = null
}

"""Input structure - C operation"""
input FormRequestInsertGQLModel @join__type(graph: FORMS) {
  """Request name"""
  name: String!
  """primary key (UUID), could be client generated"""
  id: UUID = null
}

"""Result of CU operations"""
type FormRequestResultGQLModel @join__type(graph: FORMS) {
  """primary key of CU operation object"""
  id: UUID!
  """
  Should be `ok` if descired state has been reached, otherwise `fail`.
  For update operation fail should be also stated when bad lastchange has been entered.
  """
  msg: String!
  """Object of CU operation, final version"""
  request: RequestGQLModel!
}

"""Input structure - U operation"""
input FormRequestUpdateGQLModel @join__type(graph: FORMS) {
  """timestamp of last change = TOKEN"""
  lastchange: DateTime!
  """primary key (UUID), identifies object of operation"""
  id: UUID!
  """Request name"""
  name: String = null
}

"""Result of CU operations"""
type FormResultGQLModel @join__type(graph: FORMS) {
  """primary key of CU operation object"""
  id: UUID!
  """
  Should be `ok` if descired state has been reached, otherwise `fail`.
  For update operation fail should be also stated when bad lastchange has been entered.
  """
  msg: String!
  """Result of form operation"""
  form: FormGQLModel
}

"""Type representing a section in the form"""
type FormSectionGQLModel @join__type(graph: FORMS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """English name"""
  nameEn: String!
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Section's order"""
  order: Int!
  """Retrieves the parts related to this section"""
  parts: [FormPartGQLModel!]!
  """Retrieves the form owing this section"""
  form: FormGQLModel
}

"""Entity representing a category of form types"""
type FormTypeGQLModel @join__type(graph: FORMS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """English name"""
  nameEn: String!
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Request's time of last update"""
  category: FormCategoryGQLModel
  """"""
  forms: [FormGQLModel!]!
}

"""Input structure - C operation"""
input FormTypeInsertGQLModel @join__type(graph: FORMS) {
  """form type name"""
  name: String!
  """primary key (UUID), could be client generated"""
  id: UUID = null
  valid: Boolean = true
}

"""Result of CU operations"""
type FormTypeResultGQLModel @join__type(graph: FORMS) {
  """primary key of CU operation object"""
  id: UUID!
  """
  Should be `ok` if descired state has been reached, otherwise `fail`.
  For update operation fail should be also stated when bad lastchange has been entered.
  """
  msg: String!
  """Object of CU operation, final version"""
  type: FormTypeGQLModel!
}

"""Input structure - U operation"""
input FormTypeUpdateGQLModel @join__type(graph: FORMS) {
  """timestamp of last change = TOKEN"""
  lastchange: DateTime!
  """primary key (UUID), identifies object of operation"""
  id: UUID!
  """form type name"""
  name: String = null
  valid: Boolean = null
}

"""Operators definition on FormTypeWhereFilter"""
input FormTypeWhereFilter @join__type(graph: FORMS) {
  """Filter method"""
  _or: [FormTypeWhereFilterOr!] = null
  """Filter method"""
  _and: [FormTypeWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  forms: FormWhereFilter = null
}

"""And operator definition on FormTypeWhereFilter"""
input FormTypeWhereFilterAnd @join__type(graph: FORMS) {
  """Filter method"""
  _or: [FormTypeWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  forms: FormWhereFilter = null
}

"""Or operator definition on FormTypeWhereFilter"""
input FormTypeWhereFilterOr @join__type(graph: FORMS) {
  """Filter method"""
  _and: [FormTypeWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  forms: FormWhereFilter = null
}

"""Input structure - U operation"""
input FormUpdateGQLModel @join__type(graph: FORMS) {
  """timestamp of last change = TOKEN"""
  lastchange: DateTime!
  """primary key (UUID), identifies object of operation"""
  id: UUID!
  """form name"""
  name: String = null
  """form name"""
  nameEn: String = null
  """form type"""
  typeId: UUID = null
  valid: Boolean = null
}

"""Operators definition on FormWhereFilter"""
input FormWhereFilter @join__type(graph: FORMS) {
  """Filter method"""
  _or: [FormWhereFilterOr!] = null
  """Filter method"""
  _and: [FormWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  createdby: UuidFilter = null
  """Filter method"""
  type: FormTypeWhereFilter = null
}

"""And operator definition on FormWhereFilter"""
input FormWhereFilterAnd @join__type(graph: FORMS) {
  """Filter method"""
  _or: [FormWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  createdby: UuidFilter = null
  """Filter method"""
  type: FormTypeWhereFilter = null
}

"""Or operator definition on FormWhereFilter"""
input FormWhereFilterOr @join__type(graph: FORMS) {
  """Filter method"""
  _and: [FormWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  createdby: UuidFilter = null
  """Filter method"""
  type: FormTypeWhereFilter = null
}

"""Entity representing a group type (like Faculty)"""
type GroupCategoryGQLModel @join__type(graph: UG, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
  """Who created entity"""
  createdby: UserGQLModel
  """"""
  rbacobject: RBACObjectGQLModel
}

"""Operators definition on GroupCategoryInputWhereFilter"""
input GroupCategoryInputWhereFilter @join__type(graph: UG) {
  """Filter method"""
  _or: [GroupCategoryInputWhereFilterOr!] = null
  """Filter method"""
  _and: [GroupCategoryInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
}

"""And operator definition on GroupCategoryInputWhereFilter"""
input GroupCategoryInputWhereFilterAnd @join__type(graph: UG) {
  """Filter method"""
  _or: [GroupCategoryInputWhereFilterOr!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
}

"""Or operator definition on GroupCategoryInputWhereFilter"""
input GroupCategoryInputWhereFilterOr @join__type(graph: UG) {
  """Filter method"""
  _and: [GroupCategoryInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
}

""""""
input GroupCategoryInsertGQLModel @join__type(graph: UG) {
  id: UUID = null
  name: String = null
  nameEn: String = null
}

""""""
type GroupCategoryResultGQLModel @join__type(graph: UG) {
  id: UUID!
  msg: String!
  """Result of groupcategory operation"""
  groupCategory: GroupCategoryGQLModel
}

""""""
input GroupCategoryUpdateGQLModel @join__type(graph: UG) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
}

"""Entity representing a group"""
type GroupGQLModel @join__type(graph: EVENTS, key: "id") @join__type(graph: EXTERNALIDS, key: "id") @join__type(graph: FACILITIES, key: "id") @join__type(graph: GRANTING, key: "id") @join__type(graph: LESSONS, key: "id") @join__type(graph: PROJECTS, key: "id") @join__type(graph: UG, key: "id") {
  """Entity primary key"""
  id: UUID!
  """events of the group"""
  events(skip: Int = 0, limit: Int = 10, where: UGEventInputFilter = null): [EventGQLModel!]! @join__field(graph: EVENTS)
  """All related external ids"""
  externalIds: [ExternalIdGQLModel!]! @join__field(graph: EXTERNALIDS)
  """planned items"""
  plannedLessons: [PlannedLessonGQLModel!]! @join__field(graph: LESSONS)
  """Name """
  name: String! @join__field(graph: UG)
  """English name"""
  nameEn: String! @join__field(graph: UG)
  """Who made last change"""
  changedby: UserGQLModel @join__field(graph: UG)
  """Time of entity introduction"""
  created: DateTime @join__field(graph: UG)
  """Time of last update"""
  lastchange: DateTime! @join__field(graph: UG)
  """Who created entity"""
  createdby: UserGQLModel @join__field(graph: UG)
  """Group's email"""
  email: String @join__field(graph: UG)
  """Group's name abbreviation"""
  abbreviation: String @join__field(graph: UG)
  """Group's validity (still exists?)"""
  valid: Boolean @join__field(graph: UG)
  """Group's type (like Department)"""
  grouptype: GroupTypeGQLModel @join__field(graph: UG)
  """Directly commanded groups"""
  subgroups(where: GroupInputWhereFilter = null, skip: Int = 0, limit: Int = 100): [GroupGQLModel!]! @join__field(graph: UG)
  """Commanding group"""
  mastergroup: GroupGQLModel @join__field(graph: UG)
  """List of users who are member of the group"""
  memberships(skip: Int = 0, limit: Int = 10, where: MembershipInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [MembershipGQLModel!]! @join__field(graph: UG)
  """List of roles in the group"""
  roles(skip: Int = 0, limit: Int = 10, where: RoleInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [RoleGQLModel!]! @join__field(graph: UG)
  """
  rbacobject represents an user or a group which allows to derive needed roles for CRUD operations
  """
  rbacobject: RBACObjectGQLModel @join__field(graph: UG)
}

"""Operators definition on GroupInputWhereFilter"""
input GroupInputWhereFilter @join__type(graph: UG) {
  """Filter method"""
  _or: [GroupInputWhereFilterOr!] = null
  """Filter method"""
  _and: [GroupInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  startdate: DatetimeFilter = null
  """Filter method"""
  enddate: DatetimeFilter = null
  """Filter method"""
  grouptype: GroupTypeInputWhereFilter = null
  """Filter method"""
  roles: RoleInputWhereFilter = null
}

"""And operator definition on GroupInputWhereFilter"""
input GroupInputWhereFilterAnd @join__type(graph: UG) {
  """Filter method"""
  _or: [GroupInputWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  startdate: DatetimeFilter = null
  """Filter method"""
  enddate: DatetimeFilter = null
  """Filter method"""
  grouptype: GroupTypeInputWhereFilter = null
  """Filter method"""
  roles: RoleInputWhereFilter = null
}

"""Or operator definition on GroupInputWhereFilter"""
input GroupInputWhereFilterOr @join__type(graph: UG) {
  """Filter method"""
  _and: [GroupInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  startdate: DatetimeFilter = null
  """Filter method"""
  enddate: DatetimeFilter = null
  """Filter method"""
  grouptype: GroupTypeInputWhereFilter = null
  """Filter method"""
  roles: RoleInputWhereFilter = null
}

""""""
input GroupInsertGQLModel @join__type(graph: UG) {
  name: String!
  grouptypeId: UUID!
  """primary key"""
  id: UUID = "31870afa-81ce-11f0-b782-622ad622eda4"
  nameEn: String = null
  mastergroupId: UUID = null
  valid: Boolean = null
  abbreviation: String = null
  email: String = null
}

"""represents the result of CUD op on GroupGQLModel"""
type GroupResultGQLModel @join__type(graph: UG) {
  id: UUID!
  msg: String!
  """Result of group operation"""
  group: GroupGQLModel
}

"""Entity representing a group type (like Faculty)"""
type GroupTypeGQLModel @join__type(graph: UG, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
  """Who created entity"""
  createdby: UserGQLModel
  """Groups which has this type"""
  groups: [GroupGQLModel!]!
  """Group category which this type belongs to"""
  category: GroupCategoryGQLModel
  """"""
  rbacobject: RBACObjectGQLModel
}

"""Operators definition on GroupTypeInputWhereFilter"""
input GroupTypeInputWhereFilter @join__type(graph: UG) {
  """Filter method"""
  _or: [GroupTypeInputWhereFilterOr!] = null
  """Filter method"""
  _and: [GroupTypeInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  category_id: UuidFilter = null
}

"""And operator definition on GroupTypeInputWhereFilter"""
input GroupTypeInputWhereFilterAnd @join__type(graph: UG) {
  """Filter method"""
  _or: [GroupTypeInputWhereFilterOr!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  category_id: UuidFilter = null
}

"""Or operator definition on GroupTypeInputWhereFilter"""
input GroupTypeInputWhereFilterOr @join__type(graph: UG) {
  """Filter method"""
  _and: [GroupTypeInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  category_id: UuidFilter = null
}

""""""
input GroupTypeInsertGQLModel @join__type(graph: UG) {
  id: UUID = null
  name: String = null
  nameEn: String = null
}

""""""
type GroupTypeResultGQLModel @join__type(graph: UG) {
  id: UUID!
  msg: String!
  """Result of grouptype operation"""
  groupType: GroupTypeGQLModel
}

""""""
input GroupTypeUpdateGQLModel @join__type(graph: UG) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
}

""""""
input GroupUpdateGQLModel @join__type(graph: UG) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
  grouptypeId: UUID = null
  mastergroupId: UUID = null
  valid: Boolean = null
  abbreviation: String = null
  email: String = null
}

"""Input structure - C operation"""
input HistoryInsertGQLModel @join__type(graph: FORMS) {
  """history name"""
  name: String!
  """id of request"""
  requestId: UUID!
  """id of form"""
  formId: UUID!
  """primary key (UUID), could be client generated"""
  id: UUID = null
}

"""Result of CU operations"""
type HistoryResultGQLModel @join__type(graph: FORMS) {
  """primary key of CU operation object"""
  id: UUID!
  """
  Should be `ok` if descired state has been reached, otherwise `fail`.
  For update operation fail should be also stated when bad lastchange has been entered.
  """
  msg: String!
  """Object of CU operation, final version"""
  history: RequestHistoryGQLModel!
}

"""Input structure - U operation"""
input HistoryUpdateGQLModel @join__type(graph: FORMS) {
  """timestamp of last change = TOKEN"""
  lastchange: DateTime!
  """primary key (UUID), identifies object of operation"""
  id: UUID!
  """history name"""
  name: String = null
}

"""Integer filter methods, only one constrain allowed"""
input IntFilter @join__type(graph: FACILITIES) @join__type(graph: GRANTING) {
  """operation for select.filter() method"""
  _eq: Int = null
  """operation for select.filter() method"""
  _le: Int = null
  """operation for select.filter() method"""
  _lt: Int = null
  """operation for select.filter() method"""
  _ge: Int = null
  """operation for select.filter() method"""
  _gt: Int = null
  """operation for select.filter() method"""
  _in: [Int!] = null
}

"""Represents if an user has been invited to the event ot whatever"""
type InvitationTypeGQLModel @join__type(graph: EVENTS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
}

"""Operators definition on InvitationTypeInputFilter"""
input InvitationTypeInputFilter @join__type(graph: EVENTS) {
  """Filter method"""
  _or: [InvitationTypeInputFilterOr!] = null
  """Filter method"""
  _and: [InvitationTypeInputFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on InvitationTypeInputFilter"""
input InvitationTypeInputFilterAnd @join__type(graph: EVENTS) {
  """Filter method"""
  _or: [InvitationTypeInputFilterOr!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on InvitationTypeInputFilter"""
input InvitationTypeInputFilterOr @join__type(graph: EVENTS) {
  """Filter method"""
  _and: [InvitationTypeInputFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""First datastructure for invitation type creation"""
input InvitationTypeInsertGQLModel @join__type(graph: EVENTS) {
  name: String!
  nameEn: String = null
  id: UUID = null
}

"""Result of event type operation"""
type InvitationTypeResultGQLModel @join__type(graph: EVENTS) {
  id: UUID!
  msg: String!
  """Presence type"""
  invitationType: InvitationTypeGQLModel
}

"""Datastructure for invitation type update"""
input InvitationTypeUpdateGQLModel @join__type(graph: EVENTS) {
  id: UUID!
  name: String = null
  nameEn: String = null
}

scalar join__FieldSet

enum join__Graph {
  EVENTS @join__graph(name: "events", url: "http://gql_events:8000/gql")
  EXTERNALIDS @join__graph(name: "externalids", url: "http://gql_externalids:8000/gql")
  FACILITIES @join__graph(name: "facilities", url: "http://gql_facilities:8000/gql")
  FORMS @join__graph(name: "forms", url: "http://gql_forms:8000/gql")
  GRANTING @join__graph(name: "granting", url: "http://gql_granting:8000/gql")
  LESSONS @join__graph(name: "lessons", url: "http://gql_lessons:8000/gql")
  PROJECTS @join__graph(name: "projects", url: "http://gql_projects:8000/gql")
  PUBLICATIONS @join__graph(name: "publications", url: "http://gql_publications:8000/gql")
  SURVEYS @join__graph(name: "surveys", url: "http://gql_surveys:8000/gql")
  UG @join__graph(name: "ug", url: "http://gql_ug:8000/gql")
}

"""Operators definition on LessonInputFilter"""
input LessonInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [LessonInputFilterOr!] = null
  """Filter method"""
  _and: [LessonInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
}

"""And operator definition on LessonInputFilter"""
input LessonInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [LessonInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
}

"""Or operator definition on LessonInputFilter"""
input LessonInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [LessonInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
}

"""Model for initialization during C operation"""
input LessonInsertGQLModel @join__type(graph: GRANTING) {
  topicId: UUID!
  """type of the lesson"""
  typeId: UUID!
  """count of the lessons"""
  count: Int = 2
  id: UUID = null
}

"""Result of CUD operations"""
type LessonResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of lesson operation"""
  lesson: AcLessonGQLModel
}

"""Operators definition on LessonTypeInputFilter"""
input LessonTypeInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [LessonTypeInputFilterOr!] = null
  """Filter method"""
  _and: [LessonTypeInputFilterAnd!] = null
}

"""And operator definition on LessonTypeInputFilter"""
input LessonTypeInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [LessonTypeInputFilterOr!] = null
}

"""Or operator definition on LessonTypeInputFilter"""
input LessonTypeInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [LessonTypeInputFilterAnd!] = null
}

"""Model for initialization during C operation"""
input LessonTypeInsertGQLModel @join__type(graph: GRANTING) {
  name: String!
  id: UUID = null
  nameEn: String = null
}

"""Result of CUD operations"""
type LessonTypeResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of lessontype operation"""
  lessonType: AcLessonTypeGQLModel
}

"""Model for definition of U operation"""
input LessonTypeUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
}

"""Model for definition of U operation"""
input LessonUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  typeId: UUID = null
  count: Int = null
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

"""Entity representing a relation between an user and a group"""
type MembershipGQLModel @join__type(graph: UG, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
  """Who created entity"""
  createdby: UserGQLModel
  """user"""
  user: UserGQLModel
  """group"""
  group: GroupGQLModel
  """is the membership is still valid"""
  valid: Boolean
  """date when the membership begins"""
  startdate: DateTime
  """date when the membership ends"""
  enddate: DateTime
  """"""
  rbacobject: RBACObjectGQLModel
}

"""Operators definition on MembershipInputWhereFilter"""
input MembershipInputWhereFilter @join__type(graph: UG) {
  """Filter method"""
  _or: [MembershipInputWhereFilterOr!] = null
  """Filter method"""
  _and: [MembershipInputWhereFilterAnd!] = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  group: GroupInputWhereFilter = null
  """Filter method"""
  user: UserInputWhereFilter = null
}

"""And operator definition on MembershipInputWhereFilter"""
input MembershipInputWhereFilterAnd @join__type(graph: UG) {
  """Filter method"""
  _or: [MembershipInputWhereFilterOr!] = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  group: GroupInputWhereFilter = null
  """Filter method"""
  user: UserInputWhereFilter = null
}

"""Or operator definition on MembershipInputWhereFilter"""
input MembershipInputWhereFilterOr @join__type(graph: UG) {
  """Filter method"""
  _and: [MembershipInputWhereFilterAnd!] = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  group: GroupInputWhereFilter = null
  """Filter method"""
  user: UserInputWhereFilter = null
}

""""""
input MembershipInsertGQLModel @join__type(graph: UG) {
  userId: UUID!
  groupId: UUID!
  """Primary key of entity"""
  id: UUID = "3142eb2c-81ce-11f0-b782-622ad622eda4"
  valid: Boolean = true
  startdate: DateTime = null
  enddate: DateTime = null
}

""""""
type MembershipResultGQLModel @join__type(graph: UG) {
  id: UUID!
  msg: String!
  """Result of membership operation"""
  membership: MembershipGQLModel
}

""""""
input MembershipUpdateGQLModel @join__type(graph: UG) {
  id: UUID!
  lastchange: DateTime!
  valid: Boolean = null
  startdate: DateTime = null
  enddate: DateTime = null
}

"""Entity representing a milestone"""
type MilestoneGQLModel @join__type(graph: PROJECTS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String!
  """Entity start date"""
  startdate: Date!
  """Entity end date"""
  enddate: Date!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Validity of event"""
  valid: Boolean!
  """Project of milestone"""
  project: ProjectGQLModel
  """Milestones which has this one as follower"""
  previous: [MilestoneGQLModel!]!
  """Milestone which follow this milestone"""
  nexts: [MilestoneGQLModel!]!
}

"""Definition of a milestone used for creation"""
input MilestoneInsertGQLModel @join__type(graph: PROJECTS) {
  """Name/label of the milestone"""
  name: String!
  """The ID of the associated project"""
  projectId: UUID!
  """Start date of the milestone"""
  startdate: DateTime = "2025-08-25T16:11:43.537262"
  """End date of the milestone"""
  enddate: DateTime = "2025-09-24T16:11:43.537279"
  """The ID of the milestone"""
  id: UUID = null
}

"""Definition of milestone link used for addition"""
input MilestoneLinkAddGQLModel @join__type(graph: PROJECTS) {
  """The ID of the previous milestone"""
  previousId: UUID
  """The ID of the next milestone"""
  nextId: UUID
}

"""Result of a user operation on a milestone"""
type MilestoneResultGQLModel @join__type(graph: PROJECTS) {
  """The ID of the milestone"""
  id: UUID!
  """Result of the operation (OK/Fail)"""
  msg: String!
  """Returns the milestone"""
  milestone: MilestoneGQLModel
}

"""Definition of a milestone used for update"""
input MilestoneUpdateGQLModel @join__type(graph: PROJECTS) {
  """Timestamp of the last change"""
  lastchange: DateTime!
  """The ID of the milestone"""
  id: UUID!
  """Updated name/label of the milestone"""
  name: String = null
  """Start date of the milestone"""
  startdate: DateTime = null
  """End date of the milestone"""
  enddate: DateTime = null
}

"""Operators definition on MilestoneWhereFilter"""
input MilestoneWhereFilter @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [MilestoneWhereFilterOr!] = null
  """Filter method"""
  _and: [MilestoneWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
}

"""And operator definition on MilestoneWhereFilter"""
input MilestoneWhereFilterAnd @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [MilestoneWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
}

"""Or operator definition on MilestoneWhereFilter"""
input MilestoneWhereFilterOr @join__type(graph: PROJECTS) {
  """Filter method"""
  _and: [MilestoneWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
}

"""Type for mutation root"""
type Mutation @join__type(graph: EVENTS) @join__type(graph: EXTERNALIDS) @join__type(graph: FACILITIES) @join__type(graph: FORMS) @join__type(graph: GRANTING) @join__type(graph: LESSONS) @join__type(graph: PROJECTS) @join__type(graph: PUBLICATIONS) @join__type(graph: SURVEYS) @join__type(graph: UG) {
  """C operation"""
  eventInsert(event: EventInsertGQLModel!): EventResultGQLModel! @join__field(graph: EVENTS)
  """updates the event"""
  eventUpdate(event: EventUpdateGQLModel!): EventResultGQLModel! @join__field(graph: EVENTS)
  """deletes the event"""
  eventDelete(id: UUID!): EventResultGQLModel! @join__field(graph: EVENTS)
  """creates new presence"""
  eventPresenceInsert(presence: PresenceInsertGQLModel!): PresenceResultGQLModel! @join__field(graph: EVENTS)
  """updates the presence"""
  eventPresenceUpdate(presence: PresenceUpdateGQLModel!): PresenceResultGQLModel! @join__field(graph: EVENTS)
  """deletes the event"""
  eventPresenceDelete(id: UUID!): PresenceResultGQLModel! @join__field(graph: EVENTS)
  """creates new presence"""
  eventTypeInsert(eventType: EventTypeInsertGQLModel!): EventTypeResultGQLModel! @join__field(graph: EVENTS)
  """updates the event"""
  eventTypeUpdate(eventType: EventTypeUpdateGQLModel!): EventTypeResultGQLModel! @join__field(graph: EVENTS)
  """updates the event"""
  eventTypeDelete(id: UUID!): EventTypeResultGQLModel! @join__field(graph: EVENTS)
  """creates new presence type"""
  eventPresenceTypeInsert(presenceType: PresenceTypeInsertGQLModel!): PresenceTypeResultGQLModel! @join__field(graph: EVENTS)
  """updates the presence type"""
  eventPresenceTypeUpdate(presenceType: PresenceTypeUpdateGQLModel!): PresenceTypeResultGQLModel! @join__field(graph: EVENTS)
  """deletes the presence type"""
  eventPresenceTypeDelete(id: UUID!): PresenceTypeResultGQLModel! @join__field(graph: EVENTS)
  """creates new invitation type"""
  eventInvitationTypeInsert(invitationType: InvitationTypeInsertGQLModel!): InvitationTypeResultGQLModel! @join__field(graph: EVENTS)
  """updates the invitation type"""
  eventInvitationTypeUpdate(invitationType: InvitationTypeUpdateGQLModel!): InvitationTypeResultGQLModel! @join__field(graph: EVENTS)
  """updates the invitation type"""
  eventInvitationTypeDelete(id: UUID!): InvitationTypeResultGQLModel! @join__field(graph: EVENTS)
  """creates new presence"""
  eventUserInsert(eventUser: EventUserInputGQLModel!): EventResultGQLModel! @join__field(graph: EVENTS)
  """deletes presence"""
  eventUserDelete(eventUser: EventUserInputGQLModel!): EventResultGQLModel! @join__field(graph: EVENTS)
  """updates presence"""
  eventUserUpdate(eventUser: EventUserInputGQLModel!): EventResultGQLModel! @join__field(graph: EVENTS)
  """creates new presence type"""
  eventGroupInsert(eventGroup: EventGroupInputGQLModel!): EventResultGQLModel! @join__field(graph: EVENTS)
  """creates new presence type"""
  eventGroupDelete(eventGroup: EventGroupInputGQLModel!): EventResultGQLModel! @join__field(graph: EVENTS)
  """defines a new external id for an entity"""
  externalidInsert(externalid: ExternalIdInsertGQLModel!): ExternalIdResultGQLModel @join__field(graph: EXTERNALIDS)
  """deletes the external id for an entity"""
  externalidDelete(id: UUID!): ExternalIdResultGQLModel! @join__field(graph: EXTERNALIDS)
  """defines a new external type id for an entity"""
  externaltypeidInsert(externaltypeid: ExternalIdTypeInsertGQLModel!): ExternalIdTypeResultGQLModel! @join__field(graph: EXTERNALIDS)
  """Update existing external type id for an entity"""
  externaltypeidUpdate(externaltypeid: ExternalIdTypeUpdateGQLModel!): ExternalIdTypeResultGQLModel! @join__field(graph: EXTERNALIDS)
  """defines a new external id category for an entity"""
  externalidcategoryInsert(externalidcategory: ExternalIdCategoryInsertGQLModel!): ExternalIdCategoryResultGQLModel! @join__field(graph: EXTERNALIDS)
  """Update existing external id category for an entity"""
  externalidcategoryUpdate(externalidcategory: ExternalIdCategoryUpdateGQLModel!): ExternalIdCategoryResultGQLModel! @join__field(graph: EXTERNALIDS)
  facilityInsert(facility: FacilityInsertGQLModel!): FacilityResultGQLModel! @join__field(graph: FACILITIES)
  facilityUpdate(facility: FacilityUpdateGQLModel!): FacilityResultGQLModel! @join__field(graph: FACILITIES)
  """C operation"""
  formInsert(form: FormInsertGQLModel!): FormResultGQLModel! @join__field(graph: FORMS)
  """U operation"""
  formUpdate(form: FormUpdateGQLModel!): FormResultGQLModel! @join__field(graph: FORMS)
  """C operation"""
  formItemInsert(item: FormItemInsertGQLModel!): FormItemResultGQLModel! @join__field(graph: FORMS)
  """Updates a section."""
  formItemUpdate(item: FormItemUpdateGQLModel!): FormItemResultGQLModel! @join__field(graph: FORMS)
  """C operation"""
  formItemTypeInsert(itemType: FormItemTypeInsertGQLModel!): FormItemTypeResultGQLModel! @join__field(graph: FORMS)
  """U operation"""
  formItemTypeUpdate(itemType: FormItemTypeUpdateGQLModel!): FormItemTypeResultGQLModel! @join__field(graph: FORMS)
  """C operation"""
  formPartInsert(part: FormPartInsertGQLModel!): FormPartResultGQLModel! @join__field(graph: FORMS)
  """U operation"""
  formPartUpdate(part: FormPartUpdateGQLModel!): FormPartResultGQLModel! @join__field(graph: FORMS)
  """Create a new category"""
  formCategoryInsert(formCategory: FormCategoryInsertGQLModel!): FormCategoryResultGQLModel! @join__field(graph: FORMS)
  """Update the category"""
  formCategoryUpdate(formCategory: FormCategoryUpdateGQLModel!): FormCategoryResultGQLModel! @join__field(graph: FORMS)
  """C operation"""
  formSectionInsert(section: SectionInsertGQLModel!): SectionResultGQLModel! @join__field(graph: FORMS)
  """U operation"""
  formSectionUpdate(section: SectionUpdateGQLModel!): SectionResultGQLModel! @join__field(graph: FORMS)
  """C operation"""
  formRequestInsert(request: FormRequestInsertGQLModel!): FormRequestResultGQLModel! @join__field(graph: FORMS)
  """U operation"""
  formRequestUpdate(request: FormRequestUpdateGQLModel!): FormRequestResultGQLModel! @join__field(graph: FORMS)
  """C operation"""
  formTypeInsert(formType: FormTypeInsertGQLModel!): FormTypeResultGQLModel! @join__field(graph: FORMS)
  """U operation"""
  formTypeUpdate(formType: FormTypeUpdateGQLModel!): FormTypeResultGQLModel! @join__field(graph: FORMS)
  """C operation"""
  formHistoryInsert(history: HistoryInsertGQLModel!): HistoryResultGQLModel! @join__field(graph: FORMS)
  """U operation"""
  formHistoryUpdate(history: HistoryUpdateGQLModel!): HistoryResultGQLModel! @join__field(graph: FORMS)
  """U operation"""
  formItemCategoryUpdate(itemCategory: FormItemCategoryUpdateGQLModel!): FormItemCategoryResultGQLModel! @join__field(graph: FORMS)
  """C operation"""
  formItemCategoryInsert(itemCategory: FormItemCategoryInsertGQLModel!): FormItemCategoryResultGQLModel! @join__field(graph: FORMS)
  """Adds new study program"""
  programInsert(program: ProgramInsertGQLModel!): ProgramResultGQLModel! @join__field(graph: GRANTING)
  """Update thestudy program"""
  programUpdate(program: ProgramUpdateGQLModel!): ProgramResultGQLModel! @join__field(graph: GRANTING)
  """Adds new type of study program"""
  programTypeInsert(programType: ProgramTypeInsertGQLModel!): ProgramTypeResultGQLModel! @join__field(graph: GRANTING)
  """Update the type of study program"""
  programTypeUpdate(programType: ProgramTypeUpdateGQLModel!): ProgramTypeResultGQLModel! @join__field(graph: GRANTING)
  """Adds new type of language"""
  programLanguageTypeInsert(languageType: ProgramLanguageTypeInsertGQLModel!): ProgramLanguageTypeResultGQLModel @join__field(graph: GRANTING)
  """Update the type of language"""
  programLanguageTypeUpdate(languageType: ProgramLanguageTypeUpdateGQLModel!): ProgramLanguageTypeResultGQLModel @join__field(graph: GRANTING)
  """Adds new type of form"""
  programFormTypeInsert(formType: ProgramFormTypeInsertGQLModel!): ProgramFormTypeResultGQLModel @join__field(graph: GRANTING)
  """Update the type of form"""
  programFormTypeUpdate(formType: ProgramFormTypeUpdateGQLModel!): ProgramFormTypeResultGQLModel @join__field(graph: GRANTING)
  """Adds new type of title"""
  programTitleTypeInsert(titleType: ProgramTitleTypeInsertGQLModel!): ProgramTitleTypeResultGQLModel @join__field(graph: GRANTING)
  """Update the type of title"""
  programTitleTypeUpdate(titleType: ProgramTitleTypeUpdateGQLModel!): ProgramTitleTypeResultGQLModel @join__field(graph: GRANTING)
  """Adds new type of level"""
  programLevelTypeInsert(levelType: ProgramLevelTypeInsertGQLModel!): ProgramLevelTypeResultGQLModel @join__field(graph: GRANTING)
  """Update the type of level"""
  programLevelTypeUpdate(levelType: ProgramLevelTypeUpdateGQLModel!): ProgramLevelTypeResultGQLModel @join__field(graph: GRANTING)
  """Adds new type of form"""
  programStudentInsert(student: ProgramStudentInsertGQLModel!): ProgramStudentResultGQLModel @join__field(graph: GRANTING)
  """Update the type of form"""
  programStudentUpdate(student: ProgramStudentUpdateGQLModel!): ProgramStudentResultGQLModel @join__field(graph: GRANTING)
  """Adds new type of form"""
  programMessageInsert(message: ProgramMessageInsertGQLModel!): ProgramMessageResultGQLModel @join__field(graph: GRANTING)
  """Update the type of form"""
  programMessageUpdate(message: ProgramMessageUpdateGQLModel!): ProgramMessageResultGQLModel @join__field(graph: GRANTING)
  """Adds new studentstate"""
  programStudentStateInsert(studentState: StudentStateInsertGQLModel!): StudentStateResultGQLModel! @join__field(graph: GRANTING)
  """Update the studentstate"""
  programStudentStateUpdate(studentState: StudentStateUpdateGQLModel!): StudentStateResultGQLModel! @join__field(graph: GRANTING)
  """Adds new classification"""
  programClassificationInsert(classification: ClassificationInsertGQLModel!): ClassificationResultGQLModel! @join__field(graph: GRANTING)
  """Update the classification"""
  programClassificationUpdate(classification: ClassificationUpdateGQLModel!): ClassificationResultGQLModel! @join__field(graph: GRANTING)
  """Adds new classificationtypetype"""
  programClassificationTypeInsert(classificationType: ClassificationTypeInsertGQLModel!): ClassificationTypeResultGQLModel! @join__field(graph: GRANTING)
  """Update the classificationtype"""
  programClassificationTypeUpdate(classificationType: ClassificationTypeUpdateGQLModel!): ClassificationTypeResultGQLModel! @join__field(graph: GRANTING)
  """Adds new lessontypetype"""
  programLessonTypeInsert(lessonType: LessonTypeInsertGQLModel!): LessonTypeResultGQLModel! @join__field(graph: GRANTING)
  """Update the lessontype"""
  programLessonTypeUpdate(lessonType: LessonTypeUpdateGQLModel!): LessonTypeResultGQLModel! @join__field(graph: GRANTING)
  """Adds new lesson"""
  programLessonInsert(lesson: LessonInsertGQLModel!): LessonResultGQLModel! @join__field(graph: GRANTING)
  """Update the lesson"""
  programLessonUpdate(lesson: LessonUpdateGQLModel!): LessonResultGQLModel! @join__field(graph: GRANTING)
  """Adds new topic"""
  programTopicInsert(topic: TopicInsertGQLModel!): TopicResultGQLModel! @join__field(graph: GRANTING)
  """Update the topic"""
  programTopicUpdate(topic: TopicUpdateGQLModel!): TopicResultGQLModel! @join__field(graph: GRANTING)
  """Adds new type of study program"""
  programSubjectInsert(subject: SubjectInsertGQLModel!): SubjectResultGQLModel! @join__field(graph: GRANTING)
  """Update the type of study program"""
  programSubjectUpdate(subject: SubjectUpdateGQLModel!): SubjectResultGQLModel! @join__field(graph: GRANTING)
  """Adds new semester"""
  programSemesterInsert(semester: SemesterInsertGQLModel!): SemesterResultGQLModel! @join__field(graph: GRANTING)
  """Update the semester"""
  programSemesterUpdate(semester: SemesterUpdateGQLModel!): SemesterResultGQLModel! @join__field(graph: GRANTING)
  """Plan insert"""
  planInsert(plan: PlanInsertGQLModel!): PlanResultGQLModel! @join__field(graph: LESSONS)
  """Plan update"""
  planUpdate(plan: PlanUpdateGQLModel!): PlanResultGQLModel! @join__field(graph: LESSONS)
  """Removes the facility to the planned lesson"""
  plannedLessonFacilityDelete(facilitylesson: PlannedLessonFacilityDeleteGQLModel!): PlannedLessonResultGQLModel! @join__field(graph: LESSONS)
  """Assigns a facility to the planned lesson"""
  plannedLessonFacilityInsert(facilitylesson: PlannedLessonFacilityInsertGQLModel!): PlannedLessonResultGQLModel! @join__field(graph: LESSONS)
  """Removes the group to the planned lesson"""
  plannedLessonGroupDelete(grouplesson: PlannedLessonGroupDeleteGQLModel!): PlannedLessonResultGQLModel! @join__field(graph: LESSONS)
  """Assings a group to the planned lesson"""
  plannedLessonGroupInsert(grouplesson: PlannedLessonGroupInsertGQLModel!): PlannedLessonResultGQLModel! @join__field(graph: LESSONS)
  """Removes the teacher to the planned lesson"""
  plannedLessonUserDelete(userlesson: PlannedLessonUserDeleteGQLModel!): PlannedLessonResultGQLModel! @join__field(graph: LESSONS)
  """Assings a teacher to the planned lesson"""
  plannedLessonUserInsert(userlesson: PlannedLessonUserInsertGQLModel!): PlannedLessonResultGQLModel! @join__field(graph: LESSONS)
  plannedLessonInsert(lesson: PlannedLessonInsertGQLModel!): PlannedLessonResultGQLModel! @join__field(graph: LESSONS)
  plannedLessonUpdate(lesson: PlannedLessonUpdateGQLModel!): PlannedLessonResultGQLModel! @join__field(graph: LESSONS)
  plannedLessonRemove(lesson: PlannedLessonDeleteGQLModel!): PlanResultGQLModel @join__field(graph: LESSONS)
  """Adds a new finance category."""
  financeCategoryInsert(finance: FinanceCategoryInsertGQLModel!): FinanceCategoryResultGQLModel! @join__field(graph: PROJECTS)
  """Update the finance category."""
  financeCategoryUpdate(finance: FinanceCategoryUpdateGQLModel!): FinanceCategoryResultGQLModel! @join__field(graph: PROJECTS)
  """Delete the finance category"""
  financeCategoryDelete(id: UUID!): FinanceCategoryResultGQLModel! @join__field(graph: PROJECTS)
  """Adds a new finance."""
  financeInsert(finance: FinanceInsertGQLModel!): FinanceResultGQLModel! @join__field(graph: PROJECTS)
  """Update the finance."""
  financeUpdate(finance: FinanceUpdateGQLModel!): FinanceResultGQLModel! @join__field(graph: PROJECTS)
  """Adds a new finance type."""
  financeTypeInsert(finance: FinanceTypeInsertGQLModel!): FinanceTypeResultGQLModel! @join__field(graph: PROJECTS)
  """Update the finance type."""
  financeTypeUpdate(finance: FinanceTypeUpdateGQLModel!): FinanceTypeResultGQLModel! @join__field(graph: PROJECTS)
  """Adds a new milestone."""
  milestoneInsert(milestone: MilestoneInsertGQLModel!): MilestoneResultGQLModel! @join__field(graph: PROJECTS)
  """Update the milestone."""
  milestoneUpdate(milestone: MilestoneUpdateGQLModel!): MilestoneResultGQLModel! @join__field(graph: PROJECTS)
  """Adds a new milestones link."""
  milestonesLinkAdd(link: MilestoneLinkAddGQLModel!): MilestoneResultGQLModel! @join__field(graph: PROJECTS)
  """Adds a new milestones link."""
  milestonesLinkRemove(link: MilestoneLinkAddGQLModel!): MilestoneResultGQLModel! @join__field(graph: PROJECTS)
  """Adds a new project category."""
  projectCategoryInsert(project: ProjectCategoryInsertGQLModel!): ProjectCategoryResultGQLModel! @join__field(graph: PROJECTS)
  """Update the project category."""
  projectCategoryUpdate(project: ProjectCategoryUpdateGQLModel!): ProjectCategoryResultGQLModel! @join__field(graph: PROJECTS)
  """Delete the project category."""
  projectCategoryDelete(id: UUID!): ProjectCategoryResultGQLModel! @join__field(graph: PROJECTS)
  """Adds a new project."""
  projectInsert(project: ProjectInsertGQLModel!): ProjectResultGQLModel! @join__field(graph: PROJECTS)
  """Update the project."""
  projectUpdate(project: ProjectUpdateGQLModel!): ProjectResultGQLModel! @join__field(graph: PROJECTS)
  """Adds a new project type."""
  projectTypeInsert(project: ProjectTypeInsertGQLModel!): ProjectTypeResultGQLModel! @join__field(graph: PROJECTS)
  """Update the project type."""
  projectTypeUpdate(project: ProjectTypeUpdateGQLModel!): ProjectTypeResultGQLModel! @join__field(graph: PROJECTS)
  """Adds a new statement of work."""
  statementOfWorkInsert(statementofwork: StatementOfWorkInsertGQLModel!): StatementOfWorkResultGQLModel! @join__field(graph: PROJECTS)
  """Update the statement of work."""
  statementOfWorkUpdate(statementofwork: StatementOfWorkUpdateGQLModel!): StatementOfWorkResultGQLModel! @join__field(graph: PROJECTS)
  """
  Adds the authorship to the publication, Currently it does not check if the authorship exists.
  """
  publicationAuthorInsert(author: PublicationAuthorInsertGQLModel!): AuthorResultGQLModel! @join__field(graph: PUBLICATIONS)
  """Updates an author"""
  publicationAuthorUpdate(author: PublicationAuthorUpdateGQLModel!): AuthorResultGQLModel! @join__field(graph: PUBLICATIONS)
  """Deletes the author"""
  publicationAuthorDelete(id: UUID!): AuthorResultGQLModel! @join__field(graph: PUBLICATIONS)
  """Inserts publication data"""
  publicationInsert(publication: PublicationInsertGQLModel!): PublicationResultGQLModel! @join__field(graph: PUBLICATIONS)
  """Updates publication data"""
  publicationUpdate(publication: PublicationUpdateGQLModel!): PublicationResultGQLModel! @join__field(graph: PUBLICATIONS)
  """Inserts publication data"""
  publicationDelete(publicationId: UUID!): PublicationResultGQLModel! @join__field(graph: PUBLICATIONS)
  """Inserts PublicationType data"""
  publicationTypeInsert(publicationType: PublicationTypeInsertGQLModel!): PublicationTypeResultGQLModel! @join__field(graph: PUBLICATIONS)
  """Updates publication data"""
  publicationTypeUpdate(publicationType: PublicationTypeUpdateGQLModel!): PublicationTypeResultGQLModel! @join__field(graph: PUBLICATIONS)
  """Deletes PublicationType data"""
  publicationTypeDelete(publicationTypeId: UUID!): PublicationTypeResultGQLModel! @join__field(graph: PUBLICATIONS)
  """Creates new survey"""
  surveyInsert(survey: SurveyInsertGQLModel!): SurveyResultGQLModel! @join__field(graph: SURVEYS)
  """Updates the survey"""
  surveyUpdate(survey: SurveyUpdateGQLModel!): SurveyResultGQLModel! @join__field(graph: SURVEYS)
  """Creates new question in the survey"""
  questionInsert(question: QuestionInsertGQLModel!): QuestionResultGQLModel! @join__field(graph: SURVEYS)
  """Updates question"""
  questionUpdate(question: QuestionUpdateGQLModel!): QuestionResultGQLModel! @join__field(graph: SURVEYS)
  """Allows update a question."""
  answerUpdate(answer: AnswerUpdateGQLModel!): AnswerResultGQLModel! @join__field(graph: SURVEYS)
  """Allows to insert a group"""
  groupInsert(group: GroupInsertGQLModel!): GroupResultGQLModel @join__field(graph: UG)
  """
  Allows a update of group, also it allows to change the mastergroup of the group
  """
  groupUpdate(group: GroupUpdateGQLModel!): GroupResultGQLModel! @join__field(graph: UG)
  """Deletes the group"""
  groupDelete(id: UUID!): GroupResultGQLModel! @join__field(graph: UG)
  """"""
  userInsert(user: UserInsertGQLModel!): UserResultGQLModel! @join__field(graph: UG)
  """"""
  userUpdate(user: UserUpdateGQLModel!): UserResultGQLModel! @join__field(graph: UG)
  """Deletes the user"""
  userDelete(id: UUID!): UserResultGQLModel! @join__field(graph: UG)
  """Inserts new membership"""
  membershipInsert(membership: MembershipInsertGQLModel!): MembershipResultGQLModel! @join__field(graph: UG)
  """Update the membership, cannot update group / user"""
  membershipUpdate(membership: MembershipUpdateGQLModel!): MembershipResultGQLModel! @join__field(graph: UG)
  """Deletes the membership"""
  membershipDelete(id: UUID!): MembershipResultGQLModel! @join__field(graph: UG)
  """Inserts a role"""
  roleInsert(role: RoleInsertGQLModel!): RoleResultGQLModel! @join__field(graph: UG)
  """Updates a role"""
  roleUpdate(role: RoleUpdateGQLModel!): RoleResultGQLModel! @join__field(graph: UG)
  """Deletes the role"""
  roleDelete(id: UUID!): RoleResultGQLModel! @join__field(graph: UG)
  """Inserts a new roleType record"""
  roleTypeInsert(roleType: RoleTypeInsertGQLModel!): RoleTypeResultGQLModel! @join__field(graph: UG)
  """Updates existing roleType record"""
  roleTypeUpdate(roleType: RoleTypeUpdateGQLModel!): RoleTypeResultGQLModel! @join__field(graph: UG)
  """Deletes the roleType"""
  roleTypeDelete(id: UUID!): RoleTypeResultGQLModel! @join__field(graph: UG)
  """Inserts a role category"""
  roleCategoryInsert(roleCategory: RoleCategoryInsertGQLModel!): RoleCategoryResultGQLModel! @join__field(graph: UG)
  """Updates a role category"""
  roleCategoryUpdate(roleCategory: RoleCategoryUpdateGQLModel!): RoleCategoryResultGQLModel! @join__field(graph: UG)
  """Deletes the role category"""
  roleCategoryDelete(id: UUID!): RoleCategoryResultGQLModel! @join__field(graph: UG)
  """Inserts a group type"""
  groupTypeInsert(groupType: GroupTypeInsertGQLModel!): GroupTypeResultGQLModel! @join__field(graph: UG)
  """Allows a update of group type"""
  groupTypeUpdate(groupType: GroupTypeUpdateGQLModel!): GroupTypeResultGQLModel! @join__field(graph: UG)
  """Deletes the group type"""
  groupTypeDelete(id: UUID!): GroupTypeResultGQLModel! @join__field(graph: UG)
  """Inserts a group category"""
  groupCategoryInsert(groupType: GroupCategoryInsertGQLModel!): GroupCategoryResultGQLModel! @join__field(graph: UG)
  """Allows an update of group category"""
  groupCategoryUpdate(groupType: GroupCategoryUpdateGQLModel!): GroupCategoryResultGQLModel! @join__field(graph: UG)
  """Deletes the group category"""
  groupCategoryDelete(id: UUID!): GroupCategoryResultGQLModel! @join__field(graph: UG)
  """adds to a list of role types new item"""
  roleTypeListAddRole(roleTypeListId: UUID!, roleTypeId: UUID!): RoleTypeListResult! @join__field(graph: UG)
  """Finds an user by their id"""
  roleTypeListRemoveRole(roleTypeListId: UUID!, roleTypeId: UUID!): [RoleTypeListResult!]! @join__field(graph: UG)
}

"""Entity representing a study plan for timetable creation"""
type PlanGQLModel @join__type(graph: LESSONS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  rbacObject: RBACObjectGQLModel
  """planned lessons"""
  lessons: [PlannedLessonGQLModel!]!
  """acredited semester"""
  semester: AcSemesterGQLModel
}

"""Operators definition on PlanInputFilter"""
input PlanInputFilter @join__type(graph: LESSONS) {
  """Filter method"""
  _or: [PlanInputFilterOr!] = null
  """Filter method"""
  _and: [PlanInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  masterevent_id: UuidFilter = null
}

"""And operator definition on PlanInputFilter"""
input PlanInputFilterAnd @join__type(graph: LESSONS) {
  """Filter method"""
  _or: [PlanInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  masterevent_id: UuidFilter = null
}

"""Or operator definition on PlanInputFilter"""
input PlanInputFilterOr @join__type(graph: LESSONS) {
  """Filter method"""
  _and: [PlanInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  masterevent_id: UuidFilter = null
}

""""""
input PlanInsertGQLModel @join__type(graph: LESSONS) {
  semesterId: UUID!
  mastereventId: UUID!
  id: UUID = null
  name: String = "Nový plán"
}

""""""
input PlannedLessonDeleteGQLModel @join__type(graph: LESSONS) {
  lastchange: DateTime!
  id: UUID!
  planId: UUID = null
}

""""""
input PlannedLessonFacilityDeleteGQLModel @join__type(graph: LESSONS) {
  facilityId: UUID!
  planlessonId: UUID!
}

""""""
input PlannedLessonFacilityInsertGQLModel @join__type(graph: LESSONS) {
  facilityId: UUID!
  planlessonId: UUID!
  id: UUID = null
}

"""Entity representing a planned lesson for timetable creation"""
type PlannedLessonGQLModel @join__type(graph: LESSONS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  rbacObject: RBACObjectGQLModel
  """order"""
  order: Int
  """primary key"""
  length: Int
  """type of lesson (lecture, ...)"""
  type: AcLessonTypeGQLModel
  """planned lesson linked to (aka master planned lesson)"""
  linkedTo: PlannedLessonGQLModel
  """planned lessons linked with, even trought master, excluding self"""
  linkedWith(includingSelf: Boolean = false): [PlannedLessonGQLModel!]!
  """teachers"""
  users: [UserGQLModel!]!
  """study groups"""
  groups: [GroupGQLModel!]!
  """facilities"""
  facilities: [FacilityGQLModel!]!
  """linked event"""
  event: EventGQLModel
  """linked topic from accreditation"""
  topic: AcTopicGQLModel
  """linked subject semester from program (accreditation)"""
  semester: AcSemesterGQLModel
  """linked subject semester from program (accreditation)"""
  plan: PlanGQLModel
}

""""""
input PlannedLessonGroupDeleteGQLModel @join__type(graph: LESSONS) {
  groupId: UUID!
  planlessonId: UUID!
}

""""""
input PlannedLessonGroupInsertGQLModel @join__type(graph: LESSONS) {
  groupId: UUID!
  planlessonId: UUID!
  id: UUID = null
}

"""Operators definition on PlannedLessonInputFilter"""
input PlannedLessonInputFilter @join__type(graph: LESSONS) {
  """Filter method"""
  _or: [PlannedLessonInputFilterOr!] = null
  """Filter method"""
  _and: [PlannedLessonInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  plan_id: UuidFilter = null
  """Filter method"""
  semester_id: UuidFilter = null
  """Filter method"""
  topic_id: UuidFilter = null
  """Filter method"""
  linkedlesson_id: UuidFilter = null
}

"""And operator definition on PlannedLessonInputFilter"""
input PlannedLessonInputFilterAnd @join__type(graph: LESSONS) {
  """Filter method"""
  _or: [PlannedLessonInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  plan_id: UuidFilter = null
  """Filter method"""
  semester_id: UuidFilter = null
  """Filter method"""
  topic_id: UuidFilter = null
  """Filter method"""
  linkedlesson_id: UuidFilter = null
}

"""Or operator definition on PlannedLessonInputFilter"""
input PlannedLessonInputFilterOr @join__type(graph: LESSONS) {
  """Filter method"""
  _and: [PlannedLessonInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  plan_id: UuidFilter = null
  """Filter method"""
  semester_id: UuidFilter = null
  """Filter method"""
  topic_id: UuidFilter = null
  """Filter method"""
  linkedlesson_id: UuidFilter = null
}

""""""
input PlannedLessonInsertGQLModel @join__type(graph: LESSONS) {
  """Name of lesson aka 'Introduction'"""
  name: String!
  """which plan contains this lesson"""
  planId: UUID!
  """how many 45min intervals"""
  length: Int = 2
  """proposal of datetime"""
  startproposal: DateTime = null
  """order of the item in plan"""
  order: Int = 1
  """id of lesson from other plan which would be teached with"""
  linkedlessonId: UUID = null
  topicId: UUID = null
  """aka Consultation, Laboratory, ..."""
  lessontypeId: UUID = "e2b7cbf6-95e1-11ed-a1eb-0242ac120002"
  """link to semester (subject) from accreditation"""
  semesterId: UUID = null
  """event defining when this would be teached"""
  eventId: UUID = null
  """could be primary key generated by client, UUID is expected"""
  id: UUID = null
}

""""""
type PlannedLessonResultGQLModel @join__type(graph: LESSONS) {
  id: UUID!
  msg: String!
  """Result of lesson operation"""
  lesson: PlannedLessonGQLModel
  """Master of lesson - the plan"""
  plan: PlanGQLModel
}

""""""
input PlannedLessonUpdateGQLModel @join__type(graph: LESSONS) {
  """time stamp"""
  lastchange: DateTime!
  """primary key value"""
  id: UUID!
  order: Int = null
  name: String = null
  length: Int = null
  startproposal: DateTime = null
  linkedlessonId: UUID = null
  topicId: UUID = null
  lessontypeId: UUID = null
  semesterId: UUID = null
  eventId: UUID = null
}

""""""
input PlannedLessonUserDeleteGQLModel @join__type(graph: LESSONS) {
  userId: UUID!
  planlessonId: UUID!
}

""""""
input PlannedLessonUserInsertGQLModel @join__type(graph: LESSONS) {
  userId: UUID!
  planlessonId: UUID!
  id: UUID = null
}

""""""
type PlanResultGQLModel @join__type(graph: LESSONS) {
  id: UUID!
  msg: String!
  """Result of lesson operation"""
  plan: PlanGQLModel
}

""""""
input PlanUpdateGQLModel @join__type(graph: LESSONS) {
  id: UUID!
  lastchange: DateTime!
  name: String
}

"""
Describes a relation of an user to the event by invitation (like invited) and participation (like absent)
"""
type PresenceGQLModel @join__type(graph: EVENTS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Present, Vacation etc."""
  presenceType: PresenceTypeGQLModel
  """Present, Vacation etc."""
  presenceType2: PresenceTypeGQLModel
  """Invited, Accepted, etc."""
  invitationType: InvitationTypeGQLModel
  """The user / participant"""
  user: UserGQLModel
  """The event"""
  event: EventGQLModel
}

"""Operators definition on PresenceInputFilter"""
input PresenceInputFilter @join__type(graph: EVENTS) {
  """Filter method"""
  _or: [PresenceInputFilterOr!] = null
  """Filter method"""
  _and: [PresenceInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  user_id: UuidFilter = null
  """Filter method"""
  presence_type: PresenceTypeInputFilter = null
  """Filter method"""
  invitation_type: InvitationTypeInputFilter = null
  """Filter method"""
  event: EventInputFilter = null
}

"""And operator definition on PresenceInputFilter"""
input PresenceInputFilterAnd @join__type(graph: EVENTS) {
  """Filter method"""
  _or: [PresenceInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  user_id: UuidFilter = null
  """Filter method"""
  presence_type: PresenceTypeInputFilter = null
  """Filter method"""
  invitation_type: InvitationTypeInputFilter = null
  """Filter method"""
  event: EventInputFilter = null
}

"""Or operator definition on PresenceInputFilter"""
input PresenceInputFilterOr @join__type(graph: EVENTS) {
  """Filter method"""
  _and: [PresenceInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  user_id: UuidFilter = null
  """Filter method"""
  presence_type: PresenceTypeInputFilter = null
  """Filter method"""
  invitation_type: InvitationTypeInputFilter = null
  """Filter method"""
  event: EventInputFilter = null
}

"""Datastructure for insert"""
input PresenceInsertGQLModel @join__type(graph: EVENTS) {
  userId: UUID!
  eventId: UUID!
  invitationtypeId: UUID!
  presencetypeId: UUID = null
  id: UUID = null
}

"""Result of user operation"""
type PresenceResultGQLModel @join__type(graph: EVENTS) {
  id: UUID!
  msg: String!
  """Result of presence operation"""
  presence: PresenceGQLModel
}

"""Represents a type of presence (like Present)"""
type PresenceTypeGQLModel @join__type(graph: EVENTS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
}

"""Operators definition on PresenceTypeInputFilter"""
input PresenceTypeInputFilter @join__type(graph: EVENTS) {
  """Filter method"""
  _or: [PresenceTypeInputFilterOr!] = null
  """Filter method"""
  _and: [PresenceTypeInputFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on PresenceTypeInputFilter"""
input PresenceTypeInputFilterAnd @join__type(graph: EVENTS) {
  """Filter method"""
  _or: [PresenceTypeInputFilterOr!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on PresenceTypeInputFilter"""
input PresenceTypeInputFilterOr @join__type(graph: EVENTS) {
  """Filter method"""
  _and: [PresenceTypeInputFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""First datastructure for event type creation"""
input PresenceTypeInsertGQLModel @join__type(graph: EVENTS) {
  name: String!
  nameEn: String!
  id: UUID = null
}

"""Result of event type operation"""
type PresenceTypeResultGQLModel @join__type(graph: EVENTS) {
  id: UUID!
  msg: String!
  """Presence type"""
  presenceType: PresenceTypeGQLModel
}

"""Datastructure for event type update"""
input PresenceTypeUpdateGQLModel @join__type(graph: EVENTS) {
  id: UUID!
  name: String = null
  nameEn: String = null
}

"""Datastructure for update"""
input PresenceUpdateGQLModel @join__type(graph: EVENTS) {
  id: UUID!
  lastchange: DateTime!
  invitationtypeId: UUID = null
  presencetypeId: UUID = null
}

"""Operators definition on ProgramFormTypeInputFilter"""
input ProgramFormTypeInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramFormTypeInputFilterOr!] = null
  """Filter method"""
  _and: [ProgramFormTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on ProgramFormTypeInputFilter"""
input ProgramFormTypeInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramFormTypeInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on ProgramFormTypeInputFilter"""
input ProgramFormTypeInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [ProgramFormTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Model for initialization during C operation"""
input ProgramFormTypeInsertGQLModel @join__type(graph: GRANTING) {
  name: String!
  nameEn: String = ""
  id: UUID = null
}

"""Result of CUD operations"""
type ProgramFormTypeResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of user operation"""
  programFormType: AcProgramFormTypeGQLModel
}

"""Model for definition of D operation"""
input ProgramFormTypeUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
}

"""Operators definition on ProgramInputFilter"""
input ProgramInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramInputFilterOr!] = null
  """Filter method"""
  _and: [ProgramInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on ProgramInputFilter"""
input ProgramInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on ProgramInputFilter"""
input ProgramInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [ProgramInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Model for initialization during C operation"""
input ProgramInsertGQLModel @join__type(graph: GRANTING) {
  name: String!
  typeId: UUID!
  """group of / for grants, mastergroup must be licenced_group_id"""
  groupId: UUID!
  """faculty / university"""
  licencedGroupId: UUID!
  id: UUID = null
  nameEn: String = ""
}

"""Operators definition on ProgramLanguageTypeInputFilter"""
input ProgramLanguageTypeInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramLanguageTypeInputFilterOr!] = null
  """Filter method"""
  _and: [ProgramLanguageTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on ProgramLanguageTypeInputFilter"""
input ProgramLanguageTypeInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramLanguageTypeInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on ProgramLanguageTypeInputFilter"""
input ProgramLanguageTypeInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [ProgramLanguageTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Model for initialization during C operation"""
input ProgramLanguageTypeInsertGQLModel @join__type(graph: GRANTING) {
  name: String!
  nameEn: String = ""
  id: UUID = null
}

"""Result of CUD operations"""
type ProgramLanguageTypeResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of user operation"""
  programLanguageType: AcProgramLanguageTypeGQLModel
}

"""Model for definition of D operation"""
input ProgramLanguageTypeUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
}

"""Operators definition on ProgramLevelTypeInputFilter"""
input ProgramLevelTypeInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramLevelTypeInputFilterOr!] = null
  """Filter method"""
  _and: [ProgramLevelTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on ProgramLevelTypeInputFilter"""
input ProgramLevelTypeInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramLevelTypeInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on ProgramLevelTypeInputFilter"""
input ProgramLevelTypeInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [ProgramLevelTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Model for initialization during C operation"""
input ProgramLevelTypeInsertGQLModel @join__type(graph: GRANTING) {
  name: String!
  nameEn: String = ""
  id: UUID = null
}

"""Result of CUD operations"""
type ProgramLevelTypeResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of user operation"""
  programLevelType: AcProgramLevelTypeGQLModel
}

"""Model for definition of D operation"""
input ProgramLevelTypeUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
}

"""Operators definition on ProgramMessageInputFilter"""
input ProgramMessageInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramMessageInputFilterOr!] = null
  """Filter method"""
  _and: [ProgramMessageInputFilterAnd!] = null
  """Filter method"""
  student_id: UuidFilter = null
}

"""And operator definition on ProgramMessageInputFilter"""
input ProgramMessageInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramMessageInputFilterOr!] = null
  """Filter method"""
  student_id: UuidFilter = null
}

"""Or operator definition on ProgramMessageInputFilter"""
input ProgramMessageInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [ProgramMessageInputFilterAnd!] = null
  """Filter method"""
  student_id: UuidFilter = null
}

"""Model for initialization during C operation"""
input ProgramMessageInsertGQLModel @join__type(graph: GRANTING) {
  name: String!
  studentId: UUID!
  programId: UUID!
  date: DateTime!
  description: String = "Popis"
  id: UUID = null
}

"""Result of CUD operations"""
type ProgramMessageResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of user operation"""
  message: AcProgramMessageGQLModel
}

"""Operators definition on ProgramMessagesInputFilter"""
input ProgramMessagesInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramMessagesInputFilterOr!] = null
  """Filter method"""
  _and: [ProgramMessagesInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  description: StrFilter = null
  """Filter method"""
  date: DatetimeFilter = null
  """Filter method"""
  created: DatetimeFilter = null
  """Filter method"""
  lastchange: DatetimeFilter = null
}

"""And operator definition on ProgramMessagesInputFilter"""
input ProgramMessagesInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramMessagesInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  description: StrFilter = null
  """Filter method"""
  date: DatetimeFilter = null
  """Filter method"""
  created: DatetimeFilter = null
  """Filter method"""
  lastchange: DatetimeFilter = null
}

"""Or operator definition on ProgramMessagesInputFilter"""
input ProgramMessagesInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [ProgramMessagesInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  description: StrFilter = null
  """Filter method"""
  date: DatetimeFilter = null
  """Filter method"""
  created: DatetimeFilter = null
  """Filter method"""
  lastchange: DatetimeFilter = null
}

"""Model for definition of D operation"""
input ProgramMessageUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  date: DateTime = null
  name: String = null
  nameEn: String = null
}

"""Result of CUD operations"""
type ProgramResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Object of operations"""
  program: AcProgramGQLModel
}

"""Operators definition on ProgramStudentInputFilter"""
input ProgramStudentInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramStudentInputFilterOr!] = null
  """Filter method"""
  _and: [ProgramStudentInputFilterAnd!] = null
  """Filter method"""
  student_id: UuidFilter = null
  """Filter method"""
  prorgam_id: UuidFilter = null
  """Filter method"""
  state_id: UuidFilter = null
  """Filter method"""
  semester: IntFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  created: DatetimeFilter = null
  """Filter method"""
  lastchange: DatetimeFilter = null
}

"""And operator definition on ProgramStudentInputFilter"""
input ProgramStudentInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramStudentInputFilterOr!] = null
  """Filter method"""
  student_id: UuidFilter = null
  """Filter method"""
  prorgam_id: UuidFilter = null
  """Filter method"""
  state_id: UuidFilter = null
  """Filter method"""
  semester: IntFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  created: DatetimeFilter = null
  """Filter method"""
  lastchange: DatetimeFilter = null
}

"""Or operator definition on ProgramStudentInputFilter"""
input ProgramStudentInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [ProgramStudentInputFilterAnd!] = null
  """Filter method"""
  student_id: UuidFilter = null
  """Filter method"""
  prorgam_id: UuidFilter = null
  """Filter method"""
  state_id: UuidFilter = null
  """Filter method"""
  semester: IntFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  created: DatetimeFilter = null
  """Filter method"""
  lastchange: DatetimeFilter = null
}

"""Model for initialization during C operation"""
input ProgramStudentInsertGQLModel @join__type(graph: GRANTING) {
  studentId: UUID!
  programId: UUID!
  stateId: UUID!
  semester: Int = 1
  valid: Boolean = true
  id: UUID = null
}

"""Result of CUD operations"""
type ProgramStudentResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of user operation"""
  student: AcProgramStudentGQLModel
}

"""Model for definition of D operation"""
input ProgramStudentUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  stateId: UUID = null
  semester: Int = null
  valid: Boolean = null
  name: String = null
  nameEn: String = null
}

"""Operators definition on ProgramTitleTypeInputFilter"""
input ProgramTitleTypeInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramTitleTypeInputFilterOr!] = null
  """Filter method"""
  _and: [ProgramTitleTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on ProgramTitleTypeInputFilter"""
input ProgramTitleTypeInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramTitleTypeInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on ProgramTitleTypeInputFilter"""
input ProgramTitleTypeInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [ProgramTitleTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Model for initialization during C operation"""
input ProgramTitleTypeInsertGQLModel @join__type(graph: GRANTING) {
  name: String!
  nameEn: String = ""
  id: UUID = null
}

"""Result of CUD operations"""
type ProgramTitleTypeResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of user operation"""
  programTitleType: AcProgramTitleTypeGQLModel
}

"""Model for definition of D operation"""
input ProgramTitleTypeUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
}

"""Operators definition on ProgramTypeInputFilter"""
input ProgramTypeInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramTypeInputFilterOr!] = null
  """Filter method"""
  _and: [ProgramTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on ProgramTypeInputFilter"""
input ProgramTypeInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [ProgramTypeInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on ProgramTypeInputFilter"""
input ProgramTypeInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [ProgramTypeInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Model for initialization during C operation"""
input ProgramTypeInsertGQLModel @join__type(graph: GRANTING) {
  name: String!
  nameEn: String = ""
  languageId: UUID!
  levelId: UUID!
  formId: UUID!
  titleId: UUID!
  id: UUID = null
}

"""Result of CUD operations"""
type ProgramTypeResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of user operation"""
  programType: AcProgramTypeGQLModel
}

"""Model for definition of D operation"""
input ProgramTypeUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
  languageId: UUID = null
  levelId: UUID = null
  formId: UUID = null
  titleId: UUID = null
}

"""Model for definition of D operation"""
input ProgramUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
  typeId: UUID = null
}

"""Entity representing a project category"""
type ProjectCategoryGQLModel @join__type(graph: PROJECTS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String!
  """Entity english name"""
  nameEn: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
}

"""Definition of a project category used for creation"""
input ProjectCategoryInsertGQLModel @join__type(graph: PROJECTS) {
  """Name/label of the project category"""
  name: String!
  """Name/label of the project category in English"""
  nameEn: String!
  """The ID of the project category data"""
  id: UUID = null
}

"""Result of a mutation for a project category"""
type ProjectCategoryResultGQLModel @join__type(graph: PROJECTS) {
  """The ID of the project category"""
  id: UUID!
  """Result of the operation (OK/Fail)"""
  msg: String!
  """Returns the project category"""
  project: ProjectCategoryGQLModel
}

"""Definition of a project category used for update"""
input ProjectCategoryUpdateGQLModel @join__type(graph: PROJECTS) {
  """The ID of the project category"""
  id: UUID!
  """Timestamp of last change"""
  lastchange: DateTime!
  """Updated name/label of the project category"""
  name: String = null
  """Updated name/label of the project category in English"""
  nameEn: String = null
}

"""Operators definition on ProjectCategoryWhereFilter"""
input ProjectCategoryWhereFilter @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [ProjectCategoryWhereFilterOr!] = null
  """Filter method"""
  _and: [ProjectCategoryWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
}

"""And operator definition on ProjectCategoryWhereFilter"""
input ProjectCategoryWhereFilterAnd @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [ProjectCategoryWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
}

"""Or operator definition on ProjectCategoryWhereFilter"""
input ProjectCategoryWhereFilterOr @join__type(graph: PROJECTS) {
  """Filter method"""
  _and: [ProjectCategoryWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
}

"""Entity representing a project"""
type ProjectGQLModel @join__type(graph: PROJECTS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String!
  """Entity start date"""
  startdate: Date!
  """Entity end date"""
  enddate: Date!
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Validity of event"""
  valid: Boolean!
  """Project type of project"""
  projectType: ProjectTypeGQLModel
  """List of finances, related to a project"""
  finances: [FinanceGQLModel!]!
  """List of milestones, related to a project"""
  milestones: [MilestoneGQLModel!]!
  """Group, related to a project"""
  group: GroupGQLModel
  """Team, related to a project"""
  team: GroupGQLModel
}

"""Definition of a project used for creation"""
input ProjectInsertGQLModel @join__type(graph: PROJECTS) {
  """The ID of the project type"""
  projecttypeId: UUID!
  """Name/label of the project"""
  name: String!
  """Indicates whether the projects data is valid or not (optional)"""
  valid: Boolean = true
  """The ID of the project"""
  id: UUID = null
  """Moment when the project starts"""
  startdate: DateTime = "2025-08-25T16:11:43.483821"
  """Moment when the project ends"""
  enddate: DateTime = "2025-08-25T16:11:43.483836"
  """The ID of the group associated with the project"""
  groupId: UUID = null
  """The ID of the content associated with the project """
  contentId: UUID = null
}

"""Result of a mutation for a project"""
type ProjectResultGQLModel @join__type(graph: PROJECTS) {
  """The ID of the project"""
  id: UUID!
  """Result of the operation (OK/Fail)"""
  msg: String!
  """Returns the project"""
  project: ProjectGQLModel
}

"""Entity representing a project types"""
type ProjectTypeGQLModel @join__type(graph: PROJECTS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String!
  """Entity english name"""
  nameEn: String!
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Validity of event"""
  valid: Boolean!
  """List of projects, related to project type"""
  projects: [ProjectGQLModel!]!
  """Category ID of project, related to project"""
  category: ProjectCategoryGQLModel
}

"""Definition of a project type used for creation"""
input ProjectTypeInsertGQLModel @join__type(graph: PROJECTS) {
  """The ID of the project category"""
  categoryId: UUID!
  """Name/label of the project type"""
  name: String!
  """Indicates whether the project type data is valid or not"""
  valid: Boolean = true
  """Name/label of the finance type in English"""
  nameEn: String!
  """The ID of the project type"""
  id: UUID = null
}

"""Result of a mutation for project type"""
type ProjectTypeResultGQLModel @join__type(graph: PROJECTS) {
  """The ID of the project type"""
  id: UUID!
  """Result of the operation (OK/Fail)"""
  msg: String!
  """Returns the project type"""
  project: ProjectTypeGQLModel
}

"""Definition of a project type used for update"""
input ProjectTypeUpdateGQLModel @join__type(graph: PROJECTS) {
  """The ID of the project type"""
  id: UUID!
  """Timestamp of last change"""
  lastchange: DateTime!
  """Indicates whether the projcet type data is valid or not"""
  valid: Boolean = null
  """Updated name/label of the project type"""
  name: String = null
  """Updated name/label of the project in English"""
  nameEn: String = null
}

"""Operators definition on ProjectTypeWhereFilter"""
input ProjectTypeWhereFilter @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [ProjectTypeWhereFilterOr!] = null
  """Filter method"""
  _and: [ProjectTypeWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""And operator definition on ProjectTypeWhereFilter"""
input ProjectTypeWhereFilterAnd @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [ProjectTypeWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""Or operator definition on ProjectTypeWhereFilter"""
input ProjectTypeWhereFilterOr @join__type(graph: PROJECTS) {
  """Filter method"""
  _and: [ProjectTypeWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""Definition of a project used for update"""
input ProjectUpdateGQLModel @join__type(graph: PROJECTS) {
  """The ID of the project"""
  id: UUID!
  """Timestamp of last change"""
  lastchange: DateTime!
  """Indicates whether the projects data is valid or not"""
  valid: Boolean = null
  """Updated name/label of the project"""
  name: String = null
  """The ID of the project type"""
  projecttypeId: UUID = null
  """Moment when the project starts"""
  startdate: DateTime = "2025-08-25T16:11:43.488626"
  """Moment when the project ends"""
  enddate: DateTime = "2025-08-25T16:11:43.488640"
  """The ID of the group associated with the project"""
  groupId: UUID = null
}

"""Operators definition on ProjectWhereFilter"""
input ProjectWhereFilter @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [ProjectWhereFilterOr!] = null
  """Filter method"""
  _and: [ProjectWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  createdby: UuidFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""And operator definition on ProjectWhereFilter"""
input ProjectWhereFilterAnd @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [ProjectWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  createdby: UuidFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""Or operator definition on ProjectWhereFilter"""
input ProjectWhereFilterOr @join__type(graph: PROJECTS) {
  """Filter method"""
  _and: [ProjectWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  type_id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  createdby: UuidFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""Entity representing a relation between an user and a publication"""
type PublicationAuthorGQLModel @join__type(graph: PUBLICATIONS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String
  """last change"""
  lastchange: DateTime!
  """order in author list"""
  order: Int!
  """share on publication"""
  share: Float!
  """user"""
  user: UserGQLModel
  """publication"""
  publication: PublicationGQLModel!
  """If an author is valid"""
  valid: Boolean!
}

"""Operators definition on PublicationAuthorInputWhereFilter"""
input PublicationAuthorInputWhereFilter @join__type(graph: PUBLICATIONS) {
  """Filter method"""
  _or: [PublicationAuthorInputWhereFilterOr!] = null
  """Filter method"""
  _and: [PublicationAuthorInputWhereFilterAnd!] = null
  """Filter method"""
  user_id: UuidFilter = null
  """Filter method"""
  publication_id: UuidFilter = null
}

"""And operator definition on PublicationAuthorInputWhereFilter"""
input PublicationAuthorInputWhereFilterAnd @join__type(graph: PUBLICATIONS) {
  """Filter method"""
  _or: [PublicationAuthorInputWhereFilterOr!] = null
  """Filter method"""
  user_id: UuidFilter = null
  """Filter method"""
  publication_id: UuidFilter = null
}

"""Or operator definition on PublicationAuthorInputWhereFilter"""
input PublicationAuthorInputWhereFilterOr @join__type(graph: PUBLICATIONS) {
  """Filter method"""
  _and: [PublicationAuthorInputWhereFilterAnd!] = null
  """Filter method"""
  user_id: UuidFilter = null
  """Filter method"""
  publication_id: UuidFilter = null
}

""""""
input PublicationAuthorInsertGQLModel @join__type(graph: PUBLICATIONS) {
  """The ID of the associated publication"""
  publicationId: UUID!
  """The ID of the associated user"""
  userId: UUID!
  """The ID - primary key"""
  id: UUID
  """The order of the Author in the publication"""
  order: Int
  """The share of the Author in the publication"""
  share: Float = null
  """Indicates whether the data is valid or not (optional)"""
  valid: Boolean = true
}

""""""
input PublicationAuthorUpdateGQLModel @join__type(graph: PUBLICATIONS) {
  """The ID of the Author data"""
  id: UUID!
  """Timestamp of last change"""
  lastchange: DateTime!
  """Indicates whether the data is valid or not (optional)"""
  valid: Boolean = null
  """The ID of the data type"""
  userId: UUID = null
  """The order of the Author in the publication"""
  order: Int
  """The share of the Author in the publication"""
  share: Float = null
}

"""Entity representing a publication"""
type PublicationGQLModel @join__type(graph: PUBLICATIONS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime
  """Who created entity"""
  createdBy: UserGQLModel
  """Who made last change"""
  changedBy: UserGQLModel
  """published year"""
  publishedDate: DateTime!
  """place"""
  place: String!
  """reference"""
  reference: String!
  """If a publication is valid"""
  valid: Boolean!
  """List of authors, where the author participated in publication"""
  authors: [PublicationAuthorGQLModel!]!
  """Publication type"""
  publicationtype: PublicationTypeGQLModel!
  """Subjects publication is linked to"""
  subjects: [AcSubjectGQLModel!]!
}

"""Operators definition on PublicationInputWhereFilter"""
input PublicationInputWhereFilter @join__type(graph: PUBLICATIONS) {
  """Filter method"""
  _or: [PublicationInputWhereFilterOr!] = null
  """Filter method"""
  _and: [PublicationInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on PublicationInputWhereFilter"""
input PublicationInputWhereFilterAnd @join__type(graph: PUBLICATIONS) {
  """Filter method"""
  _or: [PublicationInputWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on PublicationInputWhereFilter"""
input PublicationInputWhereFilterOr @join__type(graph: PUBLICATIONS) {
  """Filter method"""
  _and: [PublicationInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

""""""
input PublicationInsertGQLModel @join__type(graph: PUBLICATIONS) {
  id: UUID = null
  name: String = null
  place: String = null
  publishedDate: DateTime = null
  reference: String = null
  publicationTypeId: UUID = null
  valid: Boolean = null
}

""""""
type PublicationResultGQLModel @join__type(graph: PUBLICATIONS) {
  id: UUID!
  msg: String!
  """Result of publication operation"""
  publication: PublicationGQLModel
}

"""Entity representing a publication type"""
type PublicationTypeGQLModel @join__type(graph: PUBLICATIONS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String
  """List of publications with this type"""
  publications: [PublicationGQLModel!]!
}

""""""
input PublicationTypeInsertGQLModel @join__type(graph: PUBLICATIONS) {
  id: UUID = null
  name: String = null
  place: String = null
  publishedDate: Date = null
  reference: String = null
  publicationTypeId: UUID = null
  valid: Boolean = null
}

"""Result of mutation"""
type PublicationTypeResultGQLModel @join__type(graph: PUBLICATIONS) {
  """The ID of the type"""
  id: UUID!
  """Result of the operation (OK/Fail)"""
  msg: String!
  """Returns the project"""
  publicationType: PublicationTypeGQLModel
}

""""""
input PublicationTypeUpdateGQLModel @join__type(graph: PUBLICATIONS) {
  name: String = null
  place: String = null
  publishedDate: Date = null
  reference: String = null
  publicationTypeId: UUID = null
  valid: Boolean = null
}

""""""
input PublicationUpdateGQLModel @join__type(graph: PUBLICATIONS) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  place: String = null
  publishedDate: DateTime = null
  reference: String = null
  publicationTypeId: UUID = null
  valid: Boolean = null
}

type Query @join__type(graph: EVENTS) @join__type(graph: EXTERNALIDS) @join__type(graph: FACILITIES) @join__type(graph: FORMS) @join__type(graph: GRANTING) @join__type(graph: LESSONS) @join__type(graph: PROJECTS) @join__type(graph: PUBLICATIONS) @join__type(graph: SURVEYS) @join__type(graph: UG) {
  """Gets event by id"""
  eventById(id: UUID!): EventGQLModel @join__field(graph: EVENTS)
  """Finds all events paged"""
  eventPage(where: EventInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [EventGQLModel!]! @join__field(graph: EVENTS)
  """Finds all events paged"""
  eventPresencePage(where: PresenceInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [PresenceGQLModel!]! @join__field(graph: EVENTS)
  """Finds all events paged"""
  eventPresenceById(id: UUID!): PresenceGQLModel @join__field(graph: EVENTS)
  """Gets type of event by id"""
  eventTypeById(id: UUID!): EventTypeGQLModel @join__field(graph: EVENTS)
  """Finds all types of events paged"""
  eventTypePage(where: EventTypeInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [EventTypeGQLModel!]! @join__field(graph: EVENTS)
  """Gets type of presence by id"""
  eventPresenceTypeById(id: UUID!): PresenceTypeGQLModel @join__field(graph: EVENTS)
  """Finds all types of presences paged"""
  eventPresenceTypePage(where: PresenceTypeInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [PresenceTypeGQLModel!]! @join__field(graph: EVENTS)
  """Gets type of invitation by id"""
  eventInvitationTypeById(id: UUID!): InvitationTypeGQLModel @join__field(graph: EVENTS)
  """Finds all types of invitation paged"""
  eventInvitationTypePage(where: InvitationTypeInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [InvitationTypeGQLModel!]! @join__field(graph: EVENTS)
  """Returns inner id based on external id type and external id value"""
  internalId(typeidId: UUID!, outerId: String!): UUID @join__field(graph: EXTERNALIDS)
  """Returns outer ids based on external id type and inner id value"""
  externalIds(innerId: UUID!, typeidId: UUID = null): [ExternalIdGQLModel!]! @join__field(graph: EXTERNALIDS)
  """returns list of externalids"""
  externalIdsPage(skip: Int = 0, limit: Int = 10, where: ExternalidInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [ExternalIdGQLModel!]! @join__field(graph: EXTERNALIDS)
  """Rows of externaltypeids"""
  externalidtypePage(skip: Int = 0, limit: Int = 10, where: ExternalidTypeInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [ExternalIdTypeGQLModel!]! @join__field(graph: EXTERNALIDS)
  """externaltypeid by primary key"""
  externalidtypeById(id: UUID!): ExternalIdTypeGQLModel @join__field(graph: EXTERNALIDS)
  """Rows of externalcategoryids"""
  externalidcategoryPage(skip: Int = 0, limit: Int = 10, where: ExternalidCategoryInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [ExternalIdCategoryGQLModel!]! @join__field(graph: EXTERNALIDS)
  """Finds an workflow by their id"""
  sayHelloFacility(id: UUID!): String @join__field(graph: FACILITIES)
  """Finds an facility their id"""
  facilityById(id: UUID!): FacilityGQLModel @join__field(graph: FACILITIES)
  """Finds paged facilities"""
  facilityPage(where: FacilityInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [FacilityGQLModel!]! @join__field(graph: FACILITIES)
  """Finds an workflow by their id"""
  facilityTypeById(id: UUID!): FacilityTypeGQLModel @join__field(graph: FACILITIES)
  """Returns all facility types"""
  facilityTypePage(where: FacilityTypeInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [FacilityTypeGQLModel!]! @join__field(graph: FACILITIES)
  """Say hello to the world"""
  sayHelloForms(id: UUID!): String @join__field(graph: FORMS)
  """Finds an request by their id"""
  requestById(id: UUID!): RequestGQLModel @join__field(graph: FORMS)
  """Retrieves all requests"""
  requestPage(where: RequestWhereFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [RequestGQLModel!]! @join__field(graph: FORMS)
  """returns the history result by its id"""
  formHistoryById(id: UUID!): RequestHistoryGQLModel @join__field(graph: FORMS)
  """Retrieves the form type"""
  formById(id: UUID!): FormGQLModel @join__field(graph: FORMS)
  """Retrieves the form type"""
  formPage(where: FormWhereFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [FormGQLModel!]! @join__field(graph: FORMS)
  """Retrieves the form type"""
  formTypeById(id: UUID!): FormTypeGQLModel @join__field(graph: FORMS)
  """Retrieves the form type"""
  formTypePage(skip: Int! = 0, limit: Int! = 10, where: FormTypeWhereFilter = null): [FormTypeGQLModel!]! @join__field(graph: FORMS)
  """Retrieves the form category"""
  formCategoryById(id: UUID!): FormCategoryGQLModel @join__field(graph: FORMS)
  """Retrieves the form categories"""
  formCategoryPage(where: FormCategoryWhereFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [FormCategoryGQLModel!]! @join__field(graph: FORMS)
  """returns section from form by its id"""
  formSectionById(id: UUID!): FormSectionGQLModel @join__field(graph: FORMS)
  """returns part of section by its id"""
  formPartById(id: UUID!): FormPartGQLModel @join__field(graph: FORMS)
  """Retrieves the item type"""
  formItemById(id: UUID!): FormItemGQLModel @join__field(graph: FORMS)
  """Retrieves the item type"""
  formItemPage(skip: Int! = 0, limit: Int! = 0, where: FormItemWhereFilter = null): [FormItemGQLModel!]! @join__field(graph: FORMS)
  """Retrieves the item type"""
  formItemTypeById(id: UUID!): FormItemTypeGQLModel @join__field(graph: FORMS)
  """Retrieves the item types"""
  formItemTypePage(skip: Int! = 0, limit: Int! = 10): [FormItemCategoryGQLModel!]! @join__field(graph: FORMS)
  """Retrieves the item category"""
  itemCategoryById(id: UUID!): FormItemCategoryGQLModel @join__field(graph: FORMS)
  """Retrieves the item categories"""
  itemCategoryPage(skip: Int! = 0, limit: Int! = 10): [FormItemCategoryGQLModel!]! @join__field(graph: FORMS)
  """Gets program paged / filtered"""
  acProgramById(id: UUID!): AcProgramGQLModel @join__field(graph: GRANTING)
  """Gets program paged / filtered"""
  acProgramPage(where: ProgramInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcProgramGQLModel!]! @join__field(graph: GRANTING)
  """Gets program paged / filtered"""
  acProgramTypeById(id: UUID!): AcProgramTypeGQLModel @join__field(graph: GRANTING)
  """Gets program paged / filtered"""
  acProgramTypePage(where: ProgramTypeInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcProgramTypeGQLModel!]! @join__field(graph: GRANTING)
  """Gets program by id"""
  acProgramTitleTypeById(id: UUID!): AcProgramTitleTypeGQLModel @join__field(graph: GRANTING)
  """Gets program paged / filtered"""
  acProgramTitleTypePage(where: ProgramTitleTypeInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcProgramTitleTypeGQLModel!]! @join__field(graph: GRANTING)
  """Gets program by id"""
  acProgramLanguageTypeById(id: UUID!): AcProgramLanguageTypeGQLModel @join__field(graph: GRANTING)
  """Gets program paged / filtered"""
  acProgramLanguageTypePage(where: ProgramLanguageTypeInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcProgramLanguageTypeGQLModel!]! @join__field(graph: GRANTING)
  """Gets program by id"""
  acProgramLevelTypeById(id: UUID!): AcProgramLevelTypeGQLModel @join__field(graph: GRANTING)
  """Gets program paged / filtered"""
  acProgramLevelTypePage(where: ProgramLevelTypeInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcProgramLevelTypeGQLModel!]! @join__field(graph: GRANTING)
  """Gets program by id"""
  acProgramFormTypeById(id: UUID!): AcProgramFormTypeGQLModel @join__field(graph: GRANTING)
  """Gets program paged / filtered"""
  acProgramFormTypePage(where: ProgramFormTypeInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcProgramFormTypeGQLModel!]! @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acSubjectById(id: UUID!): AcSubjectGQLModel @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acSubjectPage(where: SubjectInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcSubjectGQLModel!]! @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acSemesterById(id: UUID!): AcSemesterGQLModel @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acSemesterPage(where: SemesterInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcSemesterGQLModel!]! @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acTopicById(id: UUID!): AcTopicGQLModel @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acTopicPage(where: TopicInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcTopicGQLModel!]! @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acLessonById(id: UUID!): AcLessonGQLModel @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acLessonPage(where: LessonInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcLessonGQLModel!]! @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acClassificationById(id: UUID!): AcClassificationGQLModel @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acClassificationPage(where: ClassificationInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcClassificationGQLModel!]! @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acClassificationLevelById(id: UUID!): AcClassificationLevelGQLModel @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acClassificationLevelPage(where: TopicInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcClassificationLevelGQLModel!]! @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acClassificationTypeById(id: UUID!): AcClassificationTypeGQLModel @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acClassificationTypePage(where: TopicInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcClassificationTypeGQLModel!]! @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acLessonTypeById(id: UUID!): AcLessonTypeGQLModel @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acLessonTypePage(where: LessonTypeInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcLessonTypeGQLModel!]! @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acProgramStudentStateById(id: UUID!): AcProgramStudentStateGQLModel @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acProgramStudentStatePage(where: StudentStateInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcProgramStudentStateGQLModel!]! @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acProgramStudentById(id: UUID!): AcProgramStudentGQLModel @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acProgramStudentPage(where: ProgramStudentInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcProgramStudentGQLModel!]! @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acProgramMessagePage(where: ProgramMessageInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [AcProgramMessageGQLModel!]! @join__field(graph: GRANTING)
  """Gets subjects paged / filtered"""
  acProgramMessageById(id: UUID!): AcProgramMessageGQLModel @join__field(graph: GRANTING)
  """Just container gql test"""
  sayHelloGranting(id: String = "Unknown User"): String @join__field(graph: GRANTING)
  """just a check"""
  sayHello(id: UUID!): String @join__field(graph: LESSONS)
  """Planned lesson by its id"""
  planById(id: UUID!): PlanGQLModel @join__field(graph: LESSONS)
  """Planned lesson paged"""
  planPage(where: PlanInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [PlanGQLModel!]! @join__field(graph: LESSONS)
  """Planned lesson by its id"""
  plannedLessonById(id: UUID!): PlannedLessonGQLModel @join__field(graph: LESSONS)
  """Planned lesson paged"""
  plannedLessonPage(where: PlannedLessonInputFilter = null, orderby: String = null, desc: Boolean = null, skip: Int = 0, limit: Int = 10): [PlannedLessonGQLModel!]! @join__field(graph: LESSONS)
  """Say hello to the world"""
  sayHelloProjects(id: UUID!): String @join__field(graph: PROJECTS)
  """Returns finance category by its id"""
  financeCategoryById(id: UUID!): FinanceCategoryGQLModel @join__field(graph: PROJECTS)
  """Returns a list of finance categories"""
  financeCategoryPage(skip: Int! = 0, limit: Int! = 10, where: FinanceCategoryWhereFilter = null): [FinanceCategoryGQLModel!]! @join__field(graph: PROJECTS)
  """Returns finance by its id"""
  financeById(id: UUID!): FinanceGQLModel @join__field(graph: PROJECTS)
  """Returns a list of finances"""
  financePage(skip: Int! = 0, limit: Int! = 10, where: FinanceWhereFilter = null): [FinanceGQLModel!]! @join__field(graph: PROJECTS)
  """Returns finance type by its id"""
  financeTypeById(id: UUID!): FinanceTypeGQLModel @join__field(graph: PROJECTS)
  """Returns a list of finance types"""
  financeTypePage(skip: Int! = 0, limit: Int! = 10, where: FinanceTypeWhereFilter = null): [FinanceTypeGQLModel!]! @join__field(graph: PROJECTS)
  """Returns milestone by its id"""
  milestoneById(id: UUID!): MilestoneGQLModel @join__field(graph: PROJECTS)
  """Returns a list of milestones"""
  milestonePage(skip: Int! = 0, limit: Int! = 10, where: MilestoneWhereFilter = null): [MilestoneGQLModel!]! @join__field(graph: PROJECTS)
  """Returns project category by its id"""
  projectCategoryById(id: UUID!): ProjectCategoryGQLModel @join__field(graph: PROJECTS)
  """Returns a list of project category"""
  projectCategoryPage(skip: Int! = 0, limit: Int! = 10, where: ProjectCategoryWhereFilter = null): [ProjectCategoryGQLModel!]! @join__field(graph: PROJECTS)
  """Returns project by its id"""
  projectById(id: UUID!): ProjectGQLModel @join__field(graph: PROJECTS)
  """Returns a list of projects"""
  projectPage(skip: Int! = 0, limit: Int! = 10, where: ProjectWhereFilter = null): [ProjectGQLModel!]! @join__field(graph: PROJECTS)
  """Returns project type by its id"""
  projectTypeById(id: UUID!): ProjectTypeGQLModel @join__field(graph: PROJECTS)
  """Returns a list of project types"""
  projectTypePage(skip: Int! = 0, limit: Int! = 10, where: ProjectTypeWhereFilter = null): [ProjectTypeGQLModel!]! @join__field(graph: PROJECTS)
  """Returns SOW by its id"""
  statementOfWorkById(id: UUID!): StatementOfWorkGQLModel @join__field(graph: PROJECTS)
  """Returns a list of statement of work"""
  statementOfWorkPage(skip: Int! = 0, limit: Int! = 10, where: StatementOfWorkWhereFilter = null): [StatementOfWorkGQLModel!]! @join__field(graph: PROJECTS)
  """returns the publication"""
  publicationById(id: UUID!): PublicationGQLModel @join__field(graph: PUBLICATIONS)
  """returns list of publications"""
  publicationPage(skip: Int = 0, limit: Int = 10, where: PublicationInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [PublicationGQLModel!]! @join__field(graph: PUBLICATIONS)
  """returns the publication"""
  publicationTypeById(id: UUID!): PublicationTypeGQLModel @join__field(graph: PUBLICATIONS)
  """returns list of publications"""
  publicationTypePage(skip: Int = 0, limit: Int = 10, where: PublicationInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [PublicationTypeGQLModel!]! @join__field(graph: PUBLICATIONS)
  """returns the author"""
  authorById(id: UUID!): PublicationAuthorGQLModel @join__field(graph: PUBLICATIONS)
  """returns list of authors"""
  authorPage(skip: Int = 0, limit: Int = 10, where: PublicationAuthorInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [PublicationAuthorGQLModel!]! @join__field(graph: PUBLICATIONS)
  """Finds a survey type by its id"""
  surveyTypeById(id: UUID!): SurveyTypeGQLModel @join__field(graph: SURVEYS)
  """Returns a list of surveys' types (paged)"""
  surveyTypePage(skip: Int = 0, limit: Int = 10, where: SurveyTypeInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [SurveyTypeGQLModel!]! @join__field(graph: SURVEYS)
  """Finds a survey by its id"""
  surveyById(id: UUID!): SurveyGQLModel @join__field(graph: SURVEYS)
  """Returns a list of surveys (paged)"""
  surveyPage(skip: Int = 0, limit: Int = 10, where: SurveyInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [SurveyGQLModel!]! @join__field(graph: SURVEYS)
  """Returns a list of answers (paged)"""
  answerPage(skip: Int = 0, limit: Int = 10, where: AnswerInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [AnswerGQLModel!]! @join__field(graph: SURVEYS)
  """Finds a answer by its id"""
  answerById(id: UUID!): AnswerGQLModel @join__field(graph: SURVEYS)
  """Finds a question by its id"""
  questionById(id: UUID!): QuestionGQLModel @join__field(graph: SURVEYS)
  """Returns a list of questions (paged)"""
  questionPage(skip: Int = 0, limit: Int = 10, where: QuestionInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [QuestionGQLModel!]! @join__field(graph: SURVEYS)
  """Finds a question type by its id"""
  questionTypeById(id: UUID!): QuestionTypeGQLModel @join__field(graph: SURVEYS)
  """Returns a list of question types (paged)"""
  questionTypePage(skip: Int = 0, limit: Int = 10, where: QuestionTypeInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [QuestionTypeGQLModel!]! @join__field(graph: SURVEYS)
  """"""
  userById(id: UUID!): UserGQLModel @join__field(graph: UG)
  """returns list of users"""
  userPage(skip: Int = 0, limit: Int = 10, where: UserInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [UserGQLModel!]! @join__field(graph: UG)
  """This is logged user"""
  me: UserGQLModel @join__field(graph: UG)
  """Finds a group by its id"""
  groupById(id: UUID!): GroupGQLModel @join__field(graph: UG)
  """Returns a list of groups (paged)"""
  groupPage(skip: Int = 0, limit: Int = 10, where: GroupInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [GroupGQLModel!]! @join__field(graph: UG)
  """Finds a role type by its id"""
  roleTypeById(id: UUID!): RoleTypeGQLModel @join__field(graph: UG)
  """Finds all role types paged"""
  roleTypePage(skip: Int = 0, limit: Int = 10, where: RoleTypeInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [RoleTypeGQLModel!]! @join__field(graph: UG)
  """Finds a role category by its id"""
  roleCategoryById(id: UUID!): RoleCategoryGQLModel @join__field(graph: UG)
  """gets role category page"""
  roleCategoryPage(skip: Int = 0, limit: Int = 10, where: RoleCategoryInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [RoleCategoryGQLModel!]! @join__field(graph: UG)
  """Finds a group type by its id"""
  groupTypeById(id: UUID!): GroupTypeGQLModel @join__field(graph: UG)
  """Returns a list of groups types (paged)"""
  groupTypePage(skip: Int = 0, limit: Int = 10, where: GroupTypeInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [GroupTypeGQLModel!]! @join__field(graph: UG)
  """Finds a group category by its id"""
  groupCategoryById(id: UUID!): GroupCategoryGQLModel @join__field(graph: UG)
  """Returns a list of groups categories (paged)"""
  groupCategoryPage(skip: Int = 0, limit: Int = 10, where: GroupCategoryInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [GroupCategoryGQLModel!]! @join__field(graph: UG)
  """"""
  roleByUser(userId: UUID!): [RoleGQLModel!]! @join__field(graph: UG)
  """
  ## Description
  
  Returns all roles applicable on a group (defined by groupId).
  If the group is deparment which is subgroup of faculty, role with type named "dean" will be enlisted.
  """
  rolesOnGroup(groupId: UUID!): [RoleGQLModel!]! @join__field(graph: UG)
  """
  ## Description
  
  Returns all roles applicable on an user (defined by userId).
  If there is a dean, role with type named "dean" will be enlisted.
  """
  rolesOnUser(userId: UUID!): [RoleGQLModel!]! @join__field(graph: UG)
  """"""
  rolePage(skip: Int = 0, limit: Int = 10, where: RoleInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [RoleGQLModel!]! @join__field(graph: UG)
  """"""
  roleById(id: UUID!): RoleGQLModel @join__field(graph: UG)
  """Finds a rbacobject by its id"""
  rbacById(id: UUID!): RBACObjectGQLModel @join__field(graph: UG)
  """Retrieves memberships"""
  membershipPage(skip: Int = 0, limit: Int = 10, where: MembershipInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [MembershipGQLModel!]! @join__field(graph: UG)
  """Retrieves the membership"""
  membershipById(id: UUID!): MembershipGQLModel @join__field(graph: UG)
  """returns the list of roles types associated to id"""
  roleTypeListById(listId: UUID!): [RoleTypeGQLModel!]! @join__field(graph: UG)
}

"""Entity representing an access to information"""
type QuestionGQLModel @join__type(graph: SURVEYS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String!
  """Time of last update"""
  lastchange: DateTime!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Order of questions"""
  order: Int!
  """List of answers"""
  answers: [AnswerGQLModel!]!
  """Survey which owns this question"""
  survey: SurveyGQLModel
  """Type of question"""
  type: QuestionTypeGQLModel
  """List of values for closed or similar type questions"""
  values: [QuestionValueGQLModel!]!
}

"""Operators definition on QuestionInputWhereFilter"""
input QuestionInputWhereFilter @join__type(graph: SURVEYS) {
  """Filter method"""
  _or: [QuestionInputWhereFilterOr!] = null
  """Filter method"""
  _and: [QuestionInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on QuestionInputWhereFilter"""
input QuestionInputWhereFilterAnd @join__type(graph: SURVEYS) {
  """Filter method"""
  _or: [QuestionInputWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on QuestionInputWhereFilter"""
input QuestionInputWhereFilterOr @join__type(graph: SURVEYS) {
  """Filter method"""
  _and: [QuestionInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

input QuestionInsertGQLModel @join__type(graph: SURVEYS) {
  name: String!
  surveyId: UUID!
  nameEn: String = ""
  typeId: UUID = null
  order: Int = 1
  id: UUID = null
}

type QuestionResultGQLModel @join__type(graph: SURVEYS) {
  id: UUID!
  msg: String!
  """Result of question operation"""
  question: QuestionGQLModel
}

"""Entity representing a relation between an user and a group"""
type QuestionTypeGQLModel @join__type(graph: SURVEYS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String!
  """Time of last update"""
  lastchange: DateTime!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
}

"""Operators definition on QuestionTypeInputWhereFilter"""
input QuestionTypeInputWhereFilter @join__type(graph: SURVEYS) {
  """Filter method"""
  _or: [QuestionTypeInputWhereFilterOr!] = null
  """Filter method"""
  _and: [QuestionTypeInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on QuestionTypeInputWhereFilter"""
input QuestionTypeInputWhereFilterAnd @join__type(graph: SURVEYS) {
  """Filter method"""
  _or: [QuestionTypeInputWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on QuestionTypeInputWhereFilter"""
input QuestionTypeInputWhereFilterOr @join__type(graph: SURVEYS) {
  """Filter method"""
  _and: [QuestionTypeInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

input QuestionUpdateGQLModel @join__type(graph: SURVEYS) {
  lastchange: DateTime!
  id: UUID!
  name: String = null
  nameEn: String = null
  typeId: UUID = null
  order: Int = null
}

"""Entity representing an access to information"""
type QuestionValueGQLModel @join__type(graph: SURVEYS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String!
  """Time of last update"""
  lastchange: DateTime!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """order of value"""
  order: Int!
  """Question which has this possible answer"""
  question: QuestionGQLModel
}

type RBACObjectGQLModel @join__type(graph: FORMS, key: "id") @join__type(graph: GRANTING, key: "id") @join__type(graph: LESSONS, key: "id") @join__type(graph: PROJECTS, key: "id") @join__type(graph: UG, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Roles associated with this RBAC"""
  roles: [RoleGQLModel!]! @join__field(graph: UG)
}

"""
Entity representing a request (digital form of a paper, aka "student request to the dean")
"""
type RequestGQLModel @join__type(graph: FORMS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """English name"""
  nameEn: String!
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Request's time of last update"""
  creator: UserGQLModel
  """Request's time of last update"""
  histories: [RequestHistoryGQLModel!]!
}

"""
Entity which stores a history of form evolution during a request. This allows to recall form changes.
"""
type RequestHistoryGQLModel @join__type(graph: FORMS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of last update"""
  lastchange: DateTime!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """English name"""
  nameEn: String!
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Request which history belongs to"""
  request: RequestGQLModel
  """History form"""
  form: FormGQLModel
}

"""Operators definition on RequestWhereFilter"""
input RequestWhereFilter @join__type(graph: FORMS) {
  """Filter method"""
  _or: [RequestWhereFilterOr!] = null
  """Filter method"""
  _and: [RequestWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  createdby: UuidFilter = null
}

"""And operator definition on RequestWhereFilter"""
input RequestWhereFilterAnd @join__type(graph: FORMS) {
  """Filter method"""
  _or: [RequestWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  createdby: UuidFilter = null
}

"""Or operator definition on RequestWhereFilter"""
input RequestWhereFilterOr @join__type(graph: FORMS) {
  """Filter method"""
  _and: [RequestWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  createdby: UuidFilter = null
}

"""Entity representing a role type (like Dean)"""
type RoleCategoryGQLModel @join__type(graph: UG, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String!
  """English name"""
  nameEn: String!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
  """Who created entity"""
  createdby: UserGQLModel
  """List of roles with this type"""
  roleTypes(skip: Int = 0, limit: Int = 10, where: RoleTypeInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [RoleTypeGQLModel!]!
  """"""
  rbacobject: RBACObjectGQLModel
}

"""Operators definition on RoleCategoryInputWhereFilter"""
input RoleCategoryInputWhereFilter @join__type(graph: UG) {
  """Filter method"""
  _or: [RoleCategoryInputWhereFilterOr!] = null
  """Filter method"""
  _and: [RoleCategoryInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  roletypes: RoleTypeInputWhereFilter = null
}

"""And operator definition on RoleCategoryInputWhereFilter"""
input RoleCategoryInputWhereFilterAnd @join__type(graph: UG) {
  """Filter method"""
  _or: [RoleCategoryInputWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  roletypes: RoleTypeInputWhereFilter = null
}

"""Or operator definition on RoleCategoryInputWhereFilter"""
input RoleCategoryInputWhereFilterOr @join__type(graph: UG) {
  """Filter method"""
  _and: [RoleCategoryInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  roletypes: RoleTypeInputWhereFilter = null
}

"""Initial data structure for C operation"""
input RoleCategoryInsertGQLModel @join__type(graph: UG) {
  """primary key"""
  id: UUID = "3199242e-81ce-11f0-b782-622ad622eda4"
  name: String = null
  nameEn: String = null
}

""""""
type RoleCategoryResultGQLModel @join__type(graph: UG) {
  id: UUID!
  msg: String!
  """Result of role category operation"""
  roleCategory: RoleCategoryGQLModel
}

"""Data structure for U operation"""
input RoleCategoryUpdateGQLModel @join__type(graph: UG) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
}

"""
Entity representing a role of a user in a group (like user A in group B is Dean)
"""
type RoleGQLModel @join__type(graph: UG, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Time of last update"""
  lastchange: DateTime!
  """Who created entity"""
  createdby: UserGQLModel
  """If an user has still this role"""
  valid: Boolean
  """When an user has got this role"""
  startdate: DateTime
  """When an user has been removed from this role"""
  enddate: DateTime
  """Role type (like Dean)"""
  roletype: RoleTypeGQLModel
  """User having this role. Must be member of group?"""
  user: UserGQLModel
  """Group where user has a role name"""
  group: GroupGQLModel
  """"""
  rbacobject: RBACObjectGQLModel
}

"""Operators definition on RoleInputWhereFilter"""
input RoleInputWhereFilter @join__type(graph: UG) {
  """Filter method"""
  _or: [RoleInputWhereFilterOr!] = null
  """Filter method"""
  _and: [RoleInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  startdate: DatetimeFilter = null
  """Filter method"""
  enddate: DatetimeFilter = null
  """Filter method"""
  group: GroupInputWhereFilter = null
  """Filter method"""
  user: UserInputWhereFilter = null
  """Filter method"""
  roletype: RoleTypeInputWhereFilter = null
}

"""And operator definition on RoleInputWhereFilter"""
input RoleInputWhereFilterAnd @join__type(graph: UG) {
  """Filter method"""
  _or: [RoleInputWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  startdate: DatetimeFilter = null
  """Filter method"""
  enddate: DatetimeFilter = null
  """Filter method"""
  group: GroupInputWhereFilter = null
  """Filter method"""
  user: UserInputWhereFilter = null
  """Filter method"""
  roletype: RoleTypeInputWhereFilter = null
}

"""Or operator definition on RoleInputWhereFilter"""
input RoleInputWhereFilterOr @join__type(graph: UG) {
  """Filter method"""
  _and: [RoleInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  startdate: DatetimeFilter = null
  """Filter method"""
  enddate: DatetimeFilter = null
  """Filter method"""
  group: GroupInputWhereFilter = null
  """Filter method"""
  user: UserInputWhereFilter = null
  """Filter method"""
  roletype: RoleTypeInputWhereFilter = null
}

""""""
input RoleInsertGQLModel @join__type(graph: UG) {
  userId: UUID!
  groupId: UUID!
  roletypeId: UUID!
  """primary key"""
  id: UUID = "315baa2c-81ce-11f0-b782-622ad622eda4"
  valid: Boolean = true
  """start datetime of role"""
  startdate: DateTime = "2025-08-25T16:11:43.982288"
  enddate: DateTime = null
}

""""""
type RoleResultGQLModel @join__type(graph: UG) {
  id: UUID
  msg: String!
  """Result of user operation"""
  role: RoleGQLModel
}

"""Entity representing a role type (like Dean)"""
type RoleTypeGQLModel @join__type(graph: PROJECTS, key: "id") @join__type(graph: UG, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Name """
  name: String! @join__field(graph: UG)
  """English name"""
  nameEn: String! @join__field(graph: UG)
  """Who made last change"""
  changedby: UserGQLModel @join__field(graph: UG)
  """Time of entity introduction"""
  created: DateTime @join__field(graph: UG)
  """Time of last update"""
  lastchange: DateTime! @join__field(graph: UG)
  """Who created entity"""
  createdby: UserGQLModel @join__field(graph: UG)
  """List of roles with this type"""
  roles(skip: Int = 0, limit: Int = 10, where: RoleInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [RoleGQLModel!]! @join__field(graph: UG)
  """Get role category of this role type"""
  category: RoleCategoryGQLModel @join__field(graph: UG)
  """"""
  rbacobject: RBACObjectGQLModel @join__field(graph: UG)
}

"""Operators definition on RoleTypeInputWhereFilter"""
input RoleTypeInputWhereFilter @join__type(graph: UG) {
  """Filter method"""
  _or: [RoleTypeInputWhereFilterOr!] = null
  """Filter method"""
  _and: [RoleTypeInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  roles: RoleInputWhereFilter = null
}

"""And operator definition on RoleTypeInputWhereFilter"""
input RoleTypeInputWhereFilterAnd @join__type(graph: UG) {
  """Filter method"""
  _or: [RoleTypeInputWhereFilterOr!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  roles: RoleInputWhereFilter = null
}

"""Or operator definition on RoleTypeInputWhereFilter"""
input RoleTypeInputWhereFilterOr @join__type(graph: UG) {
  """Filter method"""
  _and: [RoleTypeInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  roles: RoleInputWhereFilter = null
}

""""""
input RoleTypeInsertGQLModel @join__type(graph: UG) {
  categoryId: UUID!
  id: UUID = null
  name: String = null
  nameEn: String = null
}

""""""
type RoleTypeListResult @join__type(graph: UG) {
  id: UUID!
  msg: String!
  """Result of user operation"""
  roleTypes: [RoleTypeGQLModel!]!
}

""""""
type RoleTypeResultGQLModel @join__type(graph: UG) {
  id: UUID!
  msg: String!
  """Result of role type operation"""
  roleType: RoleTypeGQLModel
}

""""""
input RoleTypeUpdateGQLModel @join__type(graph: UG) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
}

""""""
input RoleUpdateGQLModel @join__type(graph: UG) {
  id: UUID!
  lastchange: DateTime!
  valid: Boolean = null
  startdate: DateTime = null
  enddate: DateTime = null
}

"""Input structure - C operation"""
input SectionInsertGQLModel @join__type(graph: FORMS) {
  """Section name"""
  name: String!
  """id of parent entity"""
  formId: UUID!
  """Section english name"""
  nameEn: String = null
  """primary key (UUID), could be client generated"""
  id: UUID = null
  """Position in parent entity"""
  order: Int = null
  valid: Boolean = null
}

"""Result of CU operations"""
type SectionResultGQLModel @join__type(graph: FORMS) {
  """primary key of CU operation object"""
  id: UUID!
  """
  Should be `ok` if descired state has been reached, otherwise `fail`.
  For update operation fail should be also stated when bad lastchange has been entered.
  """
  msg: String!
  """Object of CU operation, final version"""
  section: FormSectionGQLModel!
}

"""Input structure - U operation"""
input SectionUpdateGQLModel @join__type(graph: FORMS) {
  """primary key (UUID), identifies object of operation"""
  id: UUID!
  """timestamp of last change = TOKEN"""
  lastchange: DateTime!
  """Section name"""
  name: String = null
  """Section english name"""
  nameEn: String = null
  """Position in parent entity"""
  order: Int = null
  valid: Boolean = null
}

"""Operators definition on SemesterInputFilter"""
input SemesterInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [SemesterInputFilterOr!] = null
  """Filter method"""
  _and: [SemesterInputFilterAnd!] = null
}

"""And operator definition on SemesterInputFilter"""
input SemesterInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [SemesterInputFilterOr!] = null
}

"""Or operator definition on SemesterInputFilter"""
input SemesterInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [SemesterInputFilterAnd!] = null
}

"""Model for initialization during C operation"""
input SemesterInsertGQLModel @join__type(graph: GRANTING) {
  subjectId: UUID!
  classificationtypeId: UUID!
  order: Int = 0
  credits: Int = 0
  id: UUID = null
  valid: Boolean = true
}

"""Result of CUD operations"""
type SemesterResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of semester operation"""
  semester: AcSemesterGQLModel
}

"""Model for definition of D operation"""
input SemesterUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  valid: Boolean = null
  order: Int = null
  credits: Int = null
  classificationtypeId: UUID = null
}

"""Entity representing a SOW"""
type StatementOfWorkGQLModel @join__type(graph: PROJECTS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Time of last update"""
  lastchange: DateTime!
  """Entity start date"""
  startdate: Date!
  """Entity end date"""
  enddate: Date!
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """Who made last change"""
  changedby: UserGQLModel
  """Who made last change"""
  rbacobject: RBACObjectGQLModel
  """Validity of event"""
  valid: Boolean!
  """Project of statement of work"""
  project: ProjectGQLModel
  """Event, related to a statement of work"""
  event: EventGQLModel
}

"""Definition of a statement of work used for creation"""
input StatementOfWorkInsertGQLModel @join__type(graph: PROJECTS) {
  """The ID of the event data"""
  eventId: UUID!
  """The ID of the project data"""
  projectId: UUID!
  """Start date of the statement of work"""
  startdate: DateTime = "2025-08-25T16:11:43.758684"
  """End date of the statement of work"""
  enddate: DateTime = "2025-09-24T16:11:43.758698"
  """Indicates whether the statement of work data is valid or not"""
  valid: Boolean = true
  """The ID of the statement of work data"""
  id: UUID = null
}

"""Result of a mutation for statement of work"""
type StatementOfWorkResultGQLModel @join__type(graph: PROJECTS) {
  """The ID of the statement of work"""
  id: UUID!
  """Result of the operation (OK/Fail)"""
  msg: String!
  """Returns the statement of work"""
  statementofwork: StatementOfWorkGQLModel
}

"""Definition of a statement of work used for update"""
input StatementOfWorkUpdateGQLModel @join__type(graph: PROJECTS) {
  """The ID of the statement of work"""
  id: UUID!
  """Timestamp of last change"""
  lastchange: DateTime!
  """Indicates whether the financial data is valid or not"""
  valid: Boolean = null
  """The ID of the project type"""
  projectId: UUID = null
  """Start date of the milestone"""
  startdate: DateTime = null
  """End date of the milestone"""
  enddate: DateTime = null
}

"""Operators definition on StatementOfWorkWhereFilter"""
input StatementOfWorkWhereFilter @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [StatementOfWorkWhereFilterOr!] = null
  """Filter method"""
  _and: [StatementOfWorkWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""And operator definition on StatementOfWorkWhereFilter"""
input StatementOfWorkWhereFilterAnd @join__type(graph: PROJECTS) {
  """Filter method"""
  _or: [StatementOfWorkWhereFilterOr!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""Or operator definition on StatementOfWorkWhereFilter"""
input StatementOfWorkWhereFilterOr @join__type(graph: PROJECTS) {
  """Filter method"""
  _and: [StatementOfWorkWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  value: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
}

"""Str filter methods, only one constrain allowed"""
input StrFilter @join__type(graph: EVENTS) @join__type(graph: EXTERNALIDS) @join__type(graph: FACILITIES) @join__type(graph: FORMS) @join__type(graph: GRANTING) @join__type(graph: LESSONS) @join__type(graph: PROJECTS) @join__type(graph: PUBLICATIONS) @join__type(graph: SURVEYS) @join__type(graph: UG) {
  """operation for select.filter() method"""
  _eq: String = null
  """operation for select.filter() method"""
  _le: String = null
  """operation for select.filter() method"""
  _lt: String = null
  """operation for select.filter() method"""
  _ge: String = null
  """operation for select.filter() method"""
  _gt: String = null
  """operation for select.filter() method"""
  _like: String = null
  """operation for select.filter() method"""
  _ilike: String = null
  """operation for select.filter() method"""
  _startswith: String = null
  """operation for select.filter() method"""
  _endswith: String = null
}

"""Operators definition on StudentStateInputFilter"""
input StudentStateInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [StudentStateInputFilterOr!] = null
  """Filter method"""
  _and: [StudentStateInputFilterAnd!] = null
}

"""And operator definition on StudentStateInputFilter"""
input StudentStateInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [StudentStateInputFilterOr!] = null
}

"""Or operator definition on StudentStateInputFilter"""
input StudentStateInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [StudentStateInputFilterAnd!] = null
}

"""Model for initialization during C operation"""
input StudentStateInsertGQLModel @join__type(graph: GRANTING) {
  name: String!
  nameEn: String = ""
  id: UUID = null
}

"""Result of CUD operations"""
type StudentStateResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of studentstate operation"""
  studentState: AcProgramStudentStateGQLModel
}

"""Model for definition of D operation"""
input StudentStateUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  name: String
  nameEn: String = ""
}

"""Operators definition on SubjectInputFilter"""
input SubjectInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [SubjectInputFilterOr!] = null
  """Filter method"""
  _and: [SubjectInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on SubjectInputFilter"""
input SubjectInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [SubjectInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on SubjectInputFilter"""
input SubjectInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [SubjectInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Model for initialization during C operation"""
input SubjectInsertGQLModel @join__type(graph: GRANTING) {
  name: String!
  programId: UUID!
  """
  group of / for grants, its mastergroup must be group of grants for program
  """
  groupId: UUID!
  nameEn: String = ""
  id: UUID = null
  valid: Boolean = true
}

"""Result of CUD operations"""
type SubjectResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of subject operation"""
  subject: AcSubjectGQLModel
}

"""Model for definition of D operation"""
input SubjectUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  nameEn: String = null
  valid: Boolean = null
}

"""Entity representing a relation between an user and a group"""
type SurveyGQLModel @join__type(graph: SURVEYS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String!
  """Time of last update"""
  lastchange: DateTime!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
  """List"""
  questions: [QuestionGQLModel!]!
}

"""Operators definition on SurveyInputWhereFilter"""
input SurveyInputWhereFilter @join__type(graph: SURVEYS) {
  """Filter method"""
  _or: [SurveyInputWhereFilterOr!] = null
  """Filter method"""
  _and: [SurveyInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on SurveyInputWhereFilter"""
input SurveyInputWhereFilterAnd @join__type(graph: SURVEYS) {
  """Filter method"""
  _or: [SurveyInputWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on SurveyInputWhereFilter"""
input SurveyInputWhereFilterOr @join__type(graph: SURVEYS) {
  """Filter method"""
  _and: [SurveyInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

""""""
input SurveyInsertGQLModel @join__type(graph: SURVEYS) {
  name: String!
  nameEn: String = ""
  typeId: UUID = null
  id: UUID = null
}

""""""
type SurveyResultGQLModel @join__type(graph: SURVEYS) {
  id: UUID!
  msg: String!
  """Result of survey operation"""
  survey: SurveyGQLModel
}

"""Entity representing a relation between an user and a group"""
type SurveyTypeGQLModel @join__type(graph: SURVEYS, key: "id") {
  """Entity primary key"""
  id: UUID!
  """Entity name """
  name: String!
  """Time of last update"""
  lastchange: DateTime!
  """Who made last change"""
  changedby: UserGQLModel
  """Time of entity introduction"""
  created: DateTime
  """Who created entity"""
  createdby: UserGQLModel
}

"""Operators definition on SurveyTypeInputWhereFilter"""
input SurveyTypeInputWhereFilter @join__type(graph: SURVEYS) {
  """Filter method"""
  _or: [SurveyTypeInputWhereFilterOr!] = null
  """Filter method"""
  _and: [SurveyTypeInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""And operator definition on SurveyTypeInputWhereFilter"""
input SurveyTypeInputWhereFilterAnd @join__type(graph: SURVEYS) {
  """Filter method"""
  _or: [SurveyTypeInputWhereFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

"""Or operator definition on SurveyTypeInputWhereFilter"""
input SurveyTypeInputWhereFilterOr @join__type(graph: SURVEYS) {
  """Filter method"""
  _and: [SurveyTypeInputWhereFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
}

""""""
input SurveyUpdateGQLModel @join__type(graph: SURVEYS) {
  lastchange: DateTime!
  id: UUID!
  name: String = null
  nameEn: String = null
  typeId: UUID = null
}

scalar timedelta @join__type(graph: EVENTS)

"""Timeduration filter methods, only one constrain allowed"""
input TimeDurationFilter @join__type(graph: EVENTS) {
  """operation for select.filter() method"""
  _eq: timedelta = null
  """operation for select.filter() method"""
  _le: timedelta = null
  """operation for select.filter() method"""
  _lt: timedelta = null
  """operation for select.filter() method"""
  _ge: timedelta = null
  """operation for select.filter() method"""
  _gt: timedelta = null
}

""""""
enum TimeUnit @join__type(graph: EVENTS) {
  SECONDS @join__enumValue(graph: EVENTS)
  MINUTES @join__enumValue(graph: EVENTS)
  HOURS @join__enumValue(graph: EVENTS)
  DAYS @join__enumValue(graph: EVENTS)
  WEEKS @join__enumValue(graph: EVENTS)
}

"""Operators definition on TopicInputFilter"""
input TopicInputFilter @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [TopicInputFilterOr!] = null
  """Filter method"""
  _and: [TopicInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
}

"""And operator definition on TopicInputFilter"""
input TopicInputFilterAnd @join__type(graph: GRANTING) {
  """Filter method"""
  _or: [TopicInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
}

"""Or operator definition on TopicInputFilter"""
input TopicInputFilterOr @join__type(graph: GRANTING) {
  """Filter method"""
  _and: [TopicInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
}

"""Model for initialization during C operation"""
input TopicInsertGQLModel @join__type(graph: GRANTING) {
  semesterId: UUID!
  order: Int = 0
  name: String = "Nové téma"
  nameEn: String = "New Topic"
  id: UUID = null
}

"""Result of CUD operations"""
type TopicResultGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  msg: String!
  """Result of topic operation"""
  topic: AcTopicGQLModel
}

"""Model for definition of U operation"""
input TopicUpdateGQLModel @join__type(graph: GRANTING) {
  id: UUID!
  lastchange: DateTime!
  order: Int = null
  name: String = null
  nameEn: String = null
}

"""Operators definition on UGEventInputFilter"""
input UGEventInputFilter @join__type(graph: EVENTS) {
  """Filter method"""
  _or: [UGEventInputFilterOr!] = null
  """Filter method"""
  _and: [UGEventInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  created: DatetimeFilter = null
  """Filter method"""
  createdby: UuidFilter = null
  """Filter method"""
  changedby: UuidFilter = null
  """Filter method"""
  startdate: DatetimeFilter = null
  """Filter method"""
  enddate: DatetimeFilter = null
  """Filter method"""
  masterevent_id: UuidFilter = null
  """Filter method"""
  eventtype_id: UuidFilter = null
}

"""And operator definition on UGEventInputFilter"""
input UGEventInputFilterAnd @join__type(graph: EVENTS) {
  """Filter method"""
  _or: [UGEventInputFilterOr!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  created: DatetimeFilter = null
  """Filter method"""
  createdby: UuidFilter = null
  """Filter method"""
  changedby: UuidFilter = null
  """Filter method"""
  startdate: DatetimeFilter = null
  """Filter method"""
  enddate: DatetimeFilter = null
  """Filter method"""
  masterevent_id: UuidFilter = null
  """Filter method"""
  eventtype_id: UuidFilter = null
}

"""Or operator definition on UGEventInputFilter"""
input UGEventInputFilterOr @join__type(graph: EVENTS) {
  """Filter method"""
  _and: [UGEventInputFilterAnd!] = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  name_en: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  created: DatetimeFilter = null
  """Filter method"""
  createdby: UuidFilter = null
  """Filter method"""
  changedby: UuidFilter = null
  """Filter method"""
  startdate: DatetimeFilter = null
  """Filter method"""
  enddate: DatetimeFilter = null
  """Filter method"""
  masterevent_id: UuidFilter = null
  """Filter method"""
  eventtype_id: UuidFilter = null
}

"""Entity representing a user"""
type UserGQLModel @join__type(graph: EVENTS, key: "id") @join__type(graph: EXTERNALIDS, key: "id") @join__type(graph: FACILITIES, key: "id") @join__type(graph: FORMS, key: "id") @join__type(graph: GRANTING, key: "id") @join__type(graph: LESSONS, key: "id") @join__type(graph: PROJECTS, key: "id") @join__type(graph: PUBLICATIONS, key: "id") @join__type(graph: SURVEYS, key: "id") @join__type(graph: UG, key: "id") {
  """Entity primary key"""
  id: UUID!
  """events of the user"""
  events(skip: Int = 0, limit: Int = 10, where: UGEventInputFilter = null): [EventGQLModel!]! @join__field(graph: EVENTS)
  """presences of the user"""
  presences(skip: Int = 0, limit: Int = 10, where: PresenceInputFilter = null): [PresenceGQLModel!]! @join__field(graph: EVENTS)
  """All related external ids"""
  externalIds: [ExternalIdGQLModel!]! @join__field(graph: EXTERNALIDS)
  """Program owing this subjects"""
  studies: [AcProgramStudentGQLModel!]! @join__field(graph: GRANTING)
  """user classifications"""
  classifications: [AcClassificationGQLModel!]! @join__field(graph: GRANTING)
  """planned items"""
  plannedLessons: [PlannedLessonGQLModel!]! @join__field(graph: LESSONS)
  """List of authors"""
  authorPublications: [PublicationAuthorGQLModel!]! @join__field(graph: PUBLICATIONS)
  """List"""
  answers: [AnswerGQLModel!]! @join__field(graph: SURVEYS)
  """Name """
  name: String! @join__field(graph: UG)
  """Who made last change"""
  changedby: UserGQLModel @join__field(graph: UG)
  """Time of entity introduction"""
  created: DateTime @join__field(graph: UG)
  """Time of last update"""
  lastchange: DateTime! @join__field(graph: UG)
  """Who created entity"""
  createdby: UserGQLModel @join__field(graph: UG)
  """User's family name (like Obama)"""
  surname: String @join__field(graph: UG)
  """User's email"""
  email: String @join__field(graph: UG)
  """If the user is still valid"""
  valid: Boolean @join__field(graph: UG)
  """List of mmeberships associated with the user"""
  memberships(skip: Int = 0, limit: Int = 10, where: MembershipInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [MembershipGQLModel!]! @join__field(graph: UG)
  """List of mmeberships associated with the user"""
  membership(skip: Int = 0, limit: Int = 10, where: MembershipInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [MembershipGQLModel!]! @join__field(graph: UG) @deprecated(reason: "use memberships")
  """User's roles (like Dean)"""
  roles(skip: Int = 0, limit: Int = 10, where: RoleInputWhereFilter = null, orderby: String = null, desc: Boolean = null): [RoleGQLModel!]! @join__field(graph: UG)
  """User's family name (like Obama)"""
  fullname: String @join__field(graph: UG)
  """List of groups given type, where the user is member"""
  memberOf(grouptypeId: UUID = null): [GroupGQLModel!]! @join__field(graph: UG)
  """Who made last change"""
  rbacobject: RBACObjectGQLModel @join__field(graph: UG)
}

"""Operators definition on UserInputWhereFilter"""
input UserInputWhereFilter @join__type(graph: UG) {
  """Filter method"""
  _or: [UserInputWhereFilterOr!] = null
  """Filter method"""
  _and: [UserInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  surname: StrFilter = null
  """Filter method"""
  email: StrFilter = null
  """Filter method"""
  fullname: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  memberships: MembershipInputWhereFilter = null
  """Filter method"""
  roles: RoleInputWhereFilter = null
}

"""And operator definition on UserInputWhereFilter"""
input UserInputWhereFilterAnd @join__type(graph: UG) {
  """Filter method"""
  _or: [UserInputWhereFilterOr!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  surname: StrFilter = null
  """Filter method"""
  email: StrFilter = null
  """Filter method"""
  fullname: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  memberships: MembershipInputWhereFilter = null
  """Filter method"""
  roles: RoleInputWhereFilter = null
}

"""Or operator definition on UserInputWhereFilter"""
input UserInputWhereFilterOr @join__type(graph: UG) {
  """Filter method"""
  _and: [UserInputWhereFilterAnd!] = null
  """Filter method"""
  id: UuidFilter = null
  """Filter method"""
  name: StrFilter = null
  """Filter method"""
  surname: StrFilter = null
  """Filter method"""
  email: StrFilter = null
  """Filter method"""
  fullname: StrFilter = null
  """Filter method"""
  valid: BoolFilter = null
  """Filter method"""
  memberships: MembershipInputWhereFilter = null
  """Filter method"""
  roles: RoleInputWhereFilter = null
}

"""Describes initial values for C operation on UserGQLModel"""
input UserInsertGQLModel @join__type(graph: UG) {
  """primary key"""
  id: UUID = "316c160a-81ce-11f0-b782-622ad622eda4"
  name: String = null
  surname: String = null
  email: String = null
  valid: Boolean = null
}

type UserResultGQLModel @join__type(graph: UG) {
  id: UUID!
  msg: String!
  """Result of user operation"""
  user: UserGQLModel
}

"""Describes values for U operation on UserGQLModel"""
input UserUpdateGQLModel @join__type(graph: UG) {
  id: UUID!
  lastchange: DateTime!
  name: String = null
  surname: String = null
  email: String = null
  valid: Boolean = null
}

scalar UUID @join__type(graph: EVENTS) @join__type(graph: EXTERNALIDS) @join__type(graph: FACILITIES) @join__type(graph: FORMS) @join__type(graph: GRANTING) @join__type(graph: LESSONS) @join__type(graph: PROJECTS) @join__type(graph: PUBLICATIONS) @join__type(graph: SURVEYS) @join__type(graph: UG)

"""Integer filter methods, only one constrain allowed"""
input UuidFilter @join__type(graph: EVENTS) @join__type(graph: EXTERNALIDS) @join__type(graph: FACILITIES) @join__type(graph: FORMS) @join__type(graph: GRANTING) @join__type(graph: LESSONS) @join__type(graph: PROJECTS) @join__type(graph: PUBLICATIONS) @join__type(graph: SURVEYS) @join__type(graph: UG) {
  """operation for select.filter() method"""
  _eq: UUID = null
  """operation for select.filter() method"""
  _in: [UUID!] = null
}